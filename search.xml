<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>nginx https配置</title>
    <url>/2018/04/13/nginx-https-setting/</url>
    <content><![CDATA[<p>setting https in nginx</p><h1 id="nginx配置https-免费证书"><a href="#nginx配置https-免费证书" class="headerlink" title="nginx配置https(免费证书)"></a>nginx配置https(免费证书)</h1><p><a href="https://blog.csdn.net/frankenjoy123/article/details/76187270" target="_blank" rel="noopener">https://blog.csdn.net/frankenjoy123/article/details/76187270</a><br><a href="https://blog.csdn.net/u014374031/article/details/73441577" target="_blank" rel="noopener">https://blog.csdn.net/u014374031/article/details/73441577</a><br><a href="https://blog.csdn.net/zsl129/article/details/54664508" target="_blank" rel="noopener">https://blog.csdn.net/zsl129/article/details/54664508</a></p><a id="more"></a>

<p><a href="https://docs.spring.io/spring-cloud-open-service-broker/docs/current/reference/html5/" target="_blank" rel="noopener">https://docs.spring.io/spring-cloud-open-service-broker/docs/current/reference/html5/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  zhengbo.test;</span><br><span class="line"></span><br><span class="line">    ssl_certificate      server.crt;</span><br><span class="line">    ssl_certificate_key  server.key;</span><br><span class="line"></span><br><span class="line">    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers  on;</span><br><span class="line">   </span><br><span class="line">    location /a &#123;</span><br><span class="line">      proxy_pass  https://www.baidu.com;</span><br><span class="line">      proxy_set_header Host      $host;</span><br><span class="line">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">      proxy_redirect http:// $scheme://; #做https跳转</span><br><span class="line">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   location /b &#123;</span><br><span class="line">     alias /home/zhengbo/;</span><br><span class="line">     autoindex on;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="生成秘钥key-运行"><a href="#生成秘钥key-运行" class="headerlink" title="生成秘钥key,运行:"></a>生成秘钥key,运行:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl genrsa -des3 -out server.key 2048</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--debug 设置是否显示logback内部的消息--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--scan设置是否监视该配置文件的变动--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--scanPeriod设置监听时间间隔--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"false"</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"1 seconds"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置配置文件应用上下午名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置配置日志输出存放地址，通过$&#123;log.path&#125;可获取value存放的值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"d:\\logback.log"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置console的输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置过滤器，限制输出到console的日志级别--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置显示格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置stdout--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件位置，和前面的property对应--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--设置回滚策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;.%d&#123;yyyy-MM-dd&#125;.zip<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--设置过滤器，下面是只将warn之上的日志输出--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;36&#125; [%file : %line] %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置根显示级别和附加器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置具体的某个类或者包的日志级别和输出方式--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里设置的是info级别，且传递到root，由于file附加器限制了输出warn级别</span></span><br><span class="line"><span class="comment">    所以最终：warn级别的同时输出到文件和控制台，而info级别的只输出到控制台</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.study.logbackdemo.controller"</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">additivity</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>https</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu本地软件源搭建</title>
    <url>/2017/10/13/set-local-mirror-for-ubutun/</url>
    <content><![CDATA[<blockquote>
<p>由于无法抗拒的因素，在内网无法正常上网，而Linux的软件安装又是需要各种依赖项。于是一个想法在脑海中诞生。</p>
</blockquote><p>本地源的搭建分为几个步骤：<code>apt-mirror</code> 安装以及配置、本地仓库反向代理。</p><h2 id="1-从远程仓库同步软件源"><a href="#1-从远程仓库同步软件源" class="headerlink" title="1. 从远程仓库同步软件源"></a>1. 从远程仓库同步软件源</h2><p>这里的思路是采用一个类似于<code>apt-get</code> 的工具从Ubuntu的源上同步指定版本的软件下来。</p><a id="more"></a>


<p>环境准备：</p>
<ul>
<li>可以连上外网的Ubuntu主机一台</li>
<li>1T移动硬盘一个</li>
</ul>
<h3 id="1-1安装apt-mirror"><a href="#1-1安装apt-mirror" class="headerlink" title="1.1安装apt-mirror"></a>1.1安装<code>apt-mirror</code></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install apt-mirror</span><br></pre></td></tr></table></figure>

<h3 id="1-2-配置软件下载源"><a href="#1-2-配置软件下载源" class="headerlink" title="1.2 配置软件下载源"></a>1.2 配置软件下载源</h3><p><code>apt-mirror</code> 的配置文件在<code>/etc/apt/mirror.list</code> 一般只需要修改 base_path，更改、添加软件源。</p>
<p>1.<strong>修改存放的根目录</strong></p>
<ul>
<li><p>挂载硬盘到指定目录，这个目录将作为根目录用于存储</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount /dev/sdc1  /home/bobo/ubuntu-mirrors</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set base_path     /home/bobo/ubuntu-mirrors</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>2.<strong>添加修改Ubuntu原地址</strong></p>
<ul>
<li>这里选择的是网易的镜像站点(<a href="http://mirrors.163.com/.help/ubuntu.html" target="_blank" rel="noopener">http://mirrors.163.com/.help/ubuntu.html</a>)</li>
<li>修改配置文件部分为自己对应版本的配置，为了减少存储空间，<code>deb-src</code> 部分可以不下载</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############ end config ##############</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置Ubuntu trusty 源</span></span><br><span class="line">deb http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面这部分可以注释掉</span></span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">clean http://mirrors.163.com/ubuntu/</span><br></pre></td></tr></table></figure>

<h3 id="1-3开始下载"><a href="#1-3开始下载" class="headerlink" title="1.3开始下载"></a>1.3开始下载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-mirror</span><br></pre></td></tr></table></figure>

<h2 id="2-设置http镜像站点"><a href="#2-设置http镜像站点" class="headerlink" title="2. 设置http镜像站点"></a>2. 设置http镜像站点</h2><p>下载好软件源后，我们需要在内网windows电脑架设一个http的文件目录网站，为了方便记忆还借用了反向代理。</p>
<h3 id="2-1安装nginx"><a href="#2-1安装nginx" class="headerlink" title="2.1安装nginx"></a>2.1安装nginx</h3><ol>
<li><p>下载nginx windows版本，解压后双击即可运行，或者在CMD进入目录后<code>start nginx</code> ,<code>nginx -s quit</code> 关闭服务。</p>
</li>
<li><p>配置文件修改，这里主要设置两个部分，开启目录显示，设置网站的根目录。</p>
<p>开启目录显示：<code>autoindex         on;</code></p>
<p>网站根目录在location下面的子节点root修改，location指的是在网页输入的url格式，root是对应的网站根目录，这里指定为<code>E:\ubutun16.04\mirror\mirrors.tuna.tsinghua.edu.cn;</code> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">    #                  '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">    #                  '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">	</span><br><span class="line"><span class="meta">	#</span><span class="bash">开启目录显示</span></span><br><span class="line">	autoindex 		on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   E:\ubutun16.04\mirror\mirrors.tuna.tsinghua.edu.cn;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启nginx服务，地址栏测试可以看到正常显示目录。</p>
</li>
</ol>
<h3 id="2-2-反向代理设置"><a href="#2-2-反向代理设置" class="headerlink" title="2.2 反向代理设置"></a>2.2 反向代理设置</h3><p>这里思路是修改公司已经有内部域名的一台云主机的nginx服务器反向代理到自己电脑主机</p>
<p>主要就是在nginx的配置文件的server节点location下增加如下信息：</p>
<blockquote>
<p>proxy_pass <a href="http://172.16.21.92:8080" target="_blank" rel="noopener">http://172.16.21.92:8080</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">          root  html;</span><br><span class="line">          index index.html index.htm;</span><br><span class="line">          proxy_pass http://172.16.21.92:8080    // 这里！</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-配置Ubuntu软件源"><a href="#3-配置Ubuntu软件源" class="headerlink" title="3.配置Ubuntu软件源"></a>3.配置Ubuntu软件源</h2><p>修改<code>/etc/apt/sources.list</code>   将地址替换成刚搭建的http服务器地址（<a href="http://mirror.paas.cmbchina.cn/）" target="_blank" rel="noopener">http://mirror.paas.cmbchina.cn/）</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">deb https://http://mirror.paas.cmbchina.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line"># deb-src http://mirror.paas.cmbchina.cn//ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb http://mirror.paas.cmbchina.cn//ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line"># deb-src http://mirror.paas.cmbchina.cn//ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb http://mirror.paas.cmbchina.cn//ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"># deb-src http://mirror.paas.cmbchina.cn//ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb http://mirror.paas.cmbchina.cn//ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line"># deb-src http://mirror.paas.cmbchina.cn//ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"># 预发布软件源，不建议启用</span><br><span class="line"># deb http://mirror.paas.cmbchina.cn//ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line"># deb-src http://mirror.paas.cmbchina.cn//ubuntu/ xenial-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>软件源</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>logback配置</title>
    <url>/2017/10/13/set-logback/</url>
    <content><![CDATA[<p>经常要用到logback，每次都要查一下对应的配置，这里记录下！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--debug 设置是否显示logback内部的消息--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--scan设置是否监视该配置文件的变动--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--scanPeriod设置监听时间间隔--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"false"</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"1 seconds"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置配置文件应用上下午名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置配置日志输出存放地址，通过$&#123;log.path&#125;可获取value存放的值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"d:\\logback.log"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置console的输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置过滤器，限制输出到console的日志级别--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置显示格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置stdout--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件位置，和前面的property对应--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--设置回滚策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;.%d&#123;yyyy-MM-dd&#125;.zip<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--设置过滤器，下面是只将warn之上的日志输出--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;36&#125; [%file : %line] %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置根显示级别和附加器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置具体的某个类或者包的日志级别和输出方式--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里设置的是info级别，且传递到root，由于file附加器限制了输出warn级别</span></span><br><span class="line"><span class="comment">    所以最终：warn级别的同时输出到文件和控制台，而info级别的只输出到控制台</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.study.logbackdemo.controller"</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">additivity</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>logback</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>在Linux上设置代理上网server</title>
    <url>/2017/03/07/squid-setup/</url>
    <content><![CDATA[<p>由于服务器被限制不能拨号上网等多种原因，这里希望将手头一台闲置的Centos电脑设置成server，然后服务器通过这台server代理上网。<br>本次教程中我们采用广为熟知的squid进行配置server。</p><h2 id="1-确定IP地址"><a href="#1-确定IP地址" class="headerlink" title="1. 确定IP地址"></a>1. 确定IP地址</h2><p>闲置电脑的内网IP：这里假设为<code>172.31.70.1</code>, 设为A机器<br>服务器的内网IP：这里假设为<code>172.31.234.247</code>,设为B机器</p><a id="more"></a>

<h2 id="2-在机器A上部署代理服务器squid"><a href="#2-在机器A上部署代理服务器squid" class="headerlink" title="2. 在机器A上部署代理服务器squid"></a>2. 在机器A上部署代理服务器squid</h2><p>这里选择squid，因为它同时支持HTTP和HTTPS服务。</p>
<h3 id="2-1-安装squid"><a href="#2-1-安装squid" class="headerlink" title="2.1. 安装squid"></a>2.1. 安装squid</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install suqid</span><br></pre></td></tr></table></figure>
<p>默认情况下安装位置在<code>/usr/sbin/squid</code></p>
<h3 id="2-2-编辑squid配置文件"><a href="#2-2-编辑squid配置文件" class="headerlink" title="2.2 编辑squid配置文件"></a>2.2 编辑squid配置文件</h3><p>用ROOT权限打开<code>/etc/squid/squid.conf</code>文件，首先把不需要的内网地址全部注释掉，在上面增加一行，添加服务器对应的内网IP地址，然后把不需要的开放端口注释掉，只留下80和443端口，并增加一行<code>access_log /var/log/squid/access.log</code>用来记录访问情况。</p>
<p>最后修改的如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line">acl localnet src 172.31.234.247     # 这里增加一行，添加自己的HPC物理机IP地址</span><br><span class="line">#acl localnet src 10.0.0.0/8     # RFC1918 possible internal network，注释上</span><br><span class="line">#acl localnet src 172.16.0.0/12  # RFC1918 possible internal network，注释上</span><br><span class="line">#acl localnet src 192.168.0.0/16 # RFC1918 possible internal network，注释上</span><br><span class="line">#acl localnet src fc00::/7       # RFC 4193 local private network range，注释上</span><br><span class="line">#acl localnet src fe80::/10      # RFC 4291 link-local (directly plugged) machines，注释上</span><br><span class="line"></span><br><span class="line">acl SSL_ports port 443</span><br><span class="line">acl Safe_ports port 80           # http服务端口打开</span><br><span class="line">#acl Safe_ports port 21          # ftp可以根据情况是否打开</span><br><span class="line">acl Safe_ports port 443          # https服务端口打开</span><br><span class="line">#acl Safe_ports port 70          # gopher，注释上</span><br><span class="line">#acl Safe_ports port 210         # wais，注释上</span><br><span class="line">#acl Safe_ports port 1025-65535  # unregistered ports，注释上</span><br><span class="line">#acl Safe_ports port 280         # http-mgmt，注释上</span><br><span class="line">#acl Safe_ports port 488         # gss-http，注释上</span><br><span class="line">#acl Safe_ports port 591         # filemaker，注释上</span><br><span class="line">#acl Safe_ports port 777         # multiling http，注释上</span><br><span class="line">acl CONNECT method CONNECT</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">http_access allow localnet                      # 允许localnet访问（如果这行注释了，需要去掉注释）</span><br><span class="line"></span><br><span class="line"># And finally deny all other access to this proxy</span><br><span class="line">http_access deny all                            # 除上面允许的外，其他一律禁止访问</span><br><span class="line"></span><br><span class="line"># Squid normally listens to port 3128</span><br><span class="line">http_port 3128                                  # squid默认监听端口号，可以修改成别的端口号</span><br><span class="line"></span><br><span class="line"># Added</span><br><span class="line">access_log /var/log/squid/access.log            # 这里增加一行，用于监控访问记录（squid3的log目录是：/var/log/squid3/access.log）</span><br></pre></td></tr></table></figure>

<blockquote>
<p>设置允许通过该server代理的主机ip，可以采用CDIR子网划分的方式设置一个网段的IP允许访问，如172.31.0.0/16</p>
</blockquote>
<p>保存该文件。</p>
<h3 id="2-3-启动squid"><a href="#2-3-启动squid" class="headerlink" title="2.3 启动squid"></a>2.3 启动squid</h3><p>利用管理员权限执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service squid start</span><br></pre></td></tr></table></figure>
<p>查看运行状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service squid status</span><br></pre></td></tr></table></figure>
<p>如下图可看到成功开启<br><img alt data-src="http://i.imgur.com/cIQspu6.png"></p>
<h3 id="2-4-设置本机防火墙"><a href="#2-4-设置本机防火墙" class="headerlink" title="2.4 设置本机防火墙"></a>2.4 设置本机防火墙</h3><p>考虑到流量和安全，需要在本机上设置防火墙规则</p>
<h4 id="2-4-1-开启防火墙"><a href="#2-4-1-开启防火墙" class="headerlink" title="2.4.1 开启防火墙"></a>2.4.1 开启防火墙</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CentOS 6: service iptables start</span><br><span class="line">CentOS 7: systemctl start firewalld</span><br></pre></td></tr></table></figure>

<h4 id="2-4-2-添加防火墙规则"><a href="#2-4-2-添加防火墙规则" class="headerlink" title="2.4.2 添加防火墙规则"></a>2.4.2 添加防火墙规则</h4><p>首先允许服务器IP（172.31.234.247）访问3128端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT -s 172.31.234.247  -p TCP --dport 3128 -j ACCEPT</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里IP地址也可以更换成CDIR形式的网络段写法，注意端口和上面配置文件设置的一致</p>
</blockquote>
<p>然后禁止所有访问3128端口的TCP连接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p TCP --dport 3128 -j DROP</span><br></pre></td></tr></table></figure>
<p>然后保存iptables设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service iptables save</span><br></pre></td></tr></table></figure>
<p>查看规则是否生效：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -L -n</span><br></pre></td></tr></table></figure>
<p>可以看到如下：</p>
<p><img alt data-src="http://i.imgur.com/2VHXls0.png"></p>
<blockquote>
<p>这里需要提及的是防火墙默认是不会开启端口访问，所以就算你没有添加上述的禁止规则也是不能访问的，所以需要如开始部分去手动开启，如果希望对所有的ip可以访问3128端口则设置成0.0.0.0即可</p>
</blockquote>
<h2 id="3-在机器B上通过A代理上网"><a href="#3-在机器B上通过A代理上网" class="headerlink" title="3 在机器B上通过A代理上网"></a>3 在机器B上通过A代理上网</h2><p>这里有多种方式</p>
<h3 id="3-1-临时代理"><a href="#3-1-临时代理" class="headerlink" title="3.1 临时代理"></a>3.1 临时代理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export http_proxy=http://172.31.70.1:3128</span><br><span class="line"></span><br><span class="line">export https_proxy=http://172.31.70.1:3128</span><br></pre></td></tr></table></figure>

<h3 id="3-2-对个人的永久代理"><a href="#3-2-对个人的永久代理" class="headerlink" title="3.2 对个人的永久代理"></a>3.2 对个人的永久代理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line">在文件末尾添加：</span><br><span class="line"></span><br><span class="line">export http_proxy=http://172.31.70.1:3128</span><br><span class="line">export https_proxy=http://172.31.70.1:3128</span><br></pre></td></tr></table></figure>
<p><code>source .bashrc生效</code></p>
<h3 id="3-3-对所有用户永久代理"><a href="#3-3-对所有用户永久代理" class="headerlink" title="3.3 对所有用户永久代理"></a>3.3 对所有用户永久代理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line">在文件末尾添加：</span><br><span class="line"></span><br><span class="line">export http_proxy=http://172.31.70.1:3128</span><br><span class="line">export https_proxy=http://172.31.70.1:3128</span><br></pre></td></tr></table></figure>
<h3 id="3-4-设置yum代理"><a href="#3-4-设置yum代理" class="headerlink" title="3.4 设置yum代理"></a>3.4 设置yum代理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/yum.conf</span><br><span class="line">添加下面：</span><br><span class="line">proxy=http://172.31.70.1:3128</span><br></pre></td></tr></table></figure>

<h3 id="3-5-设置apt-get代理"><a href="#3-5-设置apt-get代理" class="headerlink" title="3.5 设置apt-get代理"></a>3.5 设置apt-get代理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/apt.conf</span><br><span class="line">添加：</span><br><span class="line">Acquire::http::proxy &quot;http://172.31.70.1:3128&quot;;</span><br></pre></td></tr></table></figure>
<h2 id="4-测试代理是否成功"><a href="#4-测试代理是否成功" class="headerlink" title="4 测试代理是否成功"></a>4 测试代理是否成功</h2><h3 id="4-1-测试http"><a href="#4-1-测试http" class="headerlink" title="4.1 测试http"></a>4.1 测试http</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://www.cmake.org/files/v3.3/cmake-3.3.1.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="4-2-测试https"><a href="#4-2-测试https" class="headerlink" title="4.2 测试https"></a>4.2 测试https</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://codeload.github.com/gflags/gflags/tar.gz/v2.1.2</span><br></pre></td></tr></table></figure>
<h3 id="4-3-测试git-clone"><a href="#4-3-测试git-clone" class="headerlink" title="4.3 测试git clone"></a>4.3 测试<code>git clone</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/gflags/gflags.git</span><br></pre></td></tr></table></figure>
<h2 id="5-查看记录文件"><a href="#5-查看记录文件" class="headerlink" title="5 查看记录文件"></a>5 查看记录文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cat /var/log/squid/access.log</span><br></pre></td></tr></table></figure>
<p>可以看到如下图类似的记录<br><img alt data-src="http://i.imgur.com/tftDTmu.png"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><p>阿里云<a href="https://hpc.aliyun.com/doc/ECS%E8%AE%BE%E7%BD%AEsquid%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C?spm=5176.100210.7.5.jeT3a2" target="_blank" rel="noopener">帮助文档</a></p>
</li>
<li><p>Ubuntu<a href="https://help.ubuntu.com/community/AptGet/Howto#Setting_up_apt-get_to_use_a_http-proxy" target="_blank" rel="noopener">帮助文档</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>squid</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>在visual studio中配置opencv环境</title>
    <url>/2016/09/19/setting-opencv/</url>
    <content><![CDATA[<h2 id="1-下载opencv"><a href="#1-下载opencv" class="headerlink" title="1. 下载opencv"></a>1. 下载opencv</h2><p>这里为了简单起见，我们采用事先编译好的opencv，进入<a href="http://opencv.org/" target="_blank" rel="noopener">官网地址</a>，可以看到如下图：</p><p><img alt data-src="http://i.imgur.com/vZzDC7S.png"></p><p>点击箭头位置会跳转到sourceforge对应的下载链接，如果需要其他较早的版本可以在<a href="https://sourceforge.net/projects/opencvlibrary/files/?source=navbar" target="_blank" rel="noopener">地址2</a> 对应的files文件下选择对应的系统和版本进行下载，这里不赘述。</p><h2 id="2-解压并配置系统环境变量"><a href="#2-解压并配置系统环境变量" class="headerlink" title="2. 解压并配置系统环境变量"></a>2. 解压并配置系统环境变量</h2><p>双击下载的exe文件会开始解压opencv包，需要的时间较长，这里我们在D盘新建一个文件夹<code>opencv</code>，然后将该版本的opencv解压到<code>D:\opencv</code>下。<br>这样可以方便我们管理不同版本的opencv</p><a id="more"></a>



<p><strong>添加Path变量</strong><br>右击我的电脑-》属性-》高级系统设置-》环境变量-》系统环境变量-》<br>添加如下两行到Path环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\opencv\opencv-2.4.13\build\x64\vc12\bin     </span><br><span class="line">D:\opencv\opencv-2.4.13\build\x86\vc12\bin</span><br><span class="line">------------------------------------------</span><br><span class="line">其中vc12指的是visual studio 2013，按照你自己对应的版本进行修改即可，vc11是visual studio 2012.</span><br><span class="line">x64 和 x86 是运行的时候采用的平台，这里两个都添加进去。</span><br></pre></td></tr></table></figure>
<h2 id="3-在visual-studio-中配置opencv库"><a href="#3-在visual-studio-中配置opencv库" class="headerlink" title="3. 在visual studio 中配置opencv库"></a>3. 在visual studio 中配置opencv库</h2><h3 id="3-1-首先在vs中新建一个空的win32项目："><a href="#3-1-首先在vs中新建一个空的win32项目：" class="headerlink" title="3.1. 首先在vs中新建一个空的win32项目："></a>3.1. 首先在vs中新建一个空的win32项目：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file-&gt;new project-&gt;visual c++ -&gt;Win32 Console Application-&gt;empty project</span><br></pre></td></tr></table></figure>
<p><img alt data-src="http://i.imgur.com/6K6Vdx6.png"></p>
<p><img alt data-src="http://i.imgur.com/mKcEaqi.png"></p>
<h3 id="3-2-对当前project进行opencv开发环境配置"><a href="#3-2-对当前project进行opencv开发环境配置" class="headerlink" title="3.2 对当前project进行opencv开发环境配置"></a>3.2 对当前project进行opencv开发环境配置</h3><p>其实在VS中配置opencv有两种方式：Nuget Package 安装，手动添加下载的库。</p>
<p><strong>方法1.</strong> 通过Nuget Package安装</p>
<p>右击当前solution，选择 Mange Nuget Package for solution<br><img alt data-src="http://i.imgur.com/5tJF5Uo.png"></p>
<p>在弹出的窗口右上角的搜索框输入opencv<br><img alt data-src="http://i.imgur.com/uEpEsdD.png"></p>
<p>这里我们挑选最上面的opencv2.4.10进行下载。等待几分钟后会提示下载到当前solution，选择是，过一会可以看到在当前项目文件夹下多了一个packages的包。</p>
<p><img alt data-src="http://i.imgur.com/xQU9QFq.png"></p>
<p><strong>方法2.</strong> 手动添加下载好的opencv库等到项目通用配置项中</p>
<blockquote>
<p>该方法较为繁杂，需要注意</p>
</blockquote>
<p>这里也有挺多不同方法配置的，下面介绍两种。</p>
<p><strong>a.仅针对当前项目配置</strong><br>点击solution下的工具按钮出现下图配置<br><img alt data-src="http://i.imgur.com/UW5OUNv.png"><br><img alt data-src="http://i.imgur.com/tb9E8se.png"></p>
<p><strong>b.新建配置文件，下次可以重复利用</strong></p>
<p>首先打开视图显示项目的配置文件，如下图：</p>
<p><img alt data-src="http://i.imgur.com/WAtD1Ie.png"></p>
<p>之后点击项目的小三角可以看到出现了项目配置文件：</p>
<p><img alt data-src="http://i.imgur.com/IBejEZm.png"></p>
<p>右击，Debug|Win32 </p>
<p><img alt data-src="http://i.imgur.com/q12ApHw.png"></p>
<p>选择新建一个，这里我们命名为opencvconfig，双击这个文件<br>出现和方法a类似的配置框。</p>
<p>这里共有三个地方需要配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">【通用属性】 -&gt;【VC++目录】 -&gt;【包含目录】</span><br><span class="line"> D:\opencv\opencv-2.4.13\build\include</span><br><span class="line"> D:\opencv\opencv-2.4.13\build\include\opencv</span><br><span class="line"> D:\opencv\opencv-2.4.13\build\include\opencv2</span><br><span class="line"></span><br><span class="line">【通用属性】 -&gt;【VC++目录】 -&gt;【库目录】</span><br><span class="line"> D:\opencv\opencv-2.4.13\build\x86\vc12\lib</span><br><span class="line">【通用属性】 -&gt;【链接器】-&gt;【输入】-&gt;【附加的依赖</span><br><span class="line">项】</span><br><span class="line">opencv_calib3d2413d.lib</span><br><span class="line">opencv_contrib2413d.lib</span><br><span class="line">opencv_core2413d.lib</span><br><span class="line">opencv_features2d2413d.lib</span><br><span class="line">opencv_flann2413d.lib</span><br><span class="line">opencv_gpu2413d.lib</span><br><span class="line">opencv_highgui2413d.lib</span><br><span class="line">opencv_imgproc2413d.lib</span><br><span class="line">opencv_legacy2413d.lib</span><br><span class="line">opencv_ml2413d.lib</span><br><span class="line">opencv_nonfree2413d.lib</span><br><span class="line">opencv_objdetect2413d.lib</span><br><span class="line">opencv_ocl2413d.lib</span><br><span class="line">opencv_photo2413d.lib</span><br><span class="line">opencv_stitching2413d.lib</span><br><span class="line">opencv_superres2413d.lib</span><br><span class="line">opencv_ts2413d.lib</span><br><span class="line">opencv_video2413d.lib</span><br><span class="line">opencv_videostab2413d.lib</span><br><span class="line"></span><br><span class="line">上面的2413指的是当前opencv的版本，小字母d是debug模式下调用的库，按照自己的需要添加即可。不带d的是release版本的，可以后面添加。</span><br></pre></td></tr></table></figure>

<h3 id="3-3-测试配置"><a href="#3-3-测试配置" class="headerlink" title="3.3 测试配置"></a>3.3 测试配置</h3><p>新建一个cpp源文件，输入以下内容，注意：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;  </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="comment">// 读入一张图片（游戏原画）  </span></span><br><span class="line">    Mat img=imread(<span class="string">"pic.jpg"</span>);  </span><br><span class="line">    <span class="comment">// 创建一个名为 "游戏原画"窗口  </span></span><br><span class="line">    namedWindow(<span class="string">"游戏原画"</span>);  </span><br><span class="line">    <span class="comment">// 在窗口中显示游戏原画  </span></span><br><span class="line">    imshow(<span class="string">"游戏原画"</span>,img);  </span><br><span class="line">    <span class="comment">// 等待6000 ms后窗口自动关闭  </span></span><br><span class="line">    waitKey(<span class="number">6000</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译并运行，成功即可，需要注意的是<code>pic.jpg</code>文件的名称和路径要修改成你用于测试的图片的路径。</p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>Torch安装</title>
    <url>/2016/08/11/setting-up-torch7/</url>
    <content><![CDATA[<p>Torch是基于Lua的一个用于深度学习等科学计算的框架，Torch被Facebook人工智能研究实验室和位于伦敦的谷歌DeepMind大量使用。</p><hr><p>1.下载torch源码包</p><blockquote>
<p>这里首先要有一个认识，是想把torch弄成所有的人都可用，还是仅仅是自己环境下使用</p>
</blockquote><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 对于是自己使用，直接放到自己home下的文件夹就行</span></span><br><span class="line">git clone https://github.com/torch/distro.git ~/torch --recursive </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对于想给所有人可用的则放到/opt/下面</span></span><br><span class="line">sudo git clone https://github.com/torch/distro.git /opt/ --recursive </span><br><span class="line"></span><br><span class="line">因为加了 --recursive 所以安装会下载很多东西，如果中间有失败的请删除后重新git</span><br></pre></td></tr></table></figure><a id="more"></a>





<blockquote>
<p>因为GFW的原因，国内GitHub下载会比较慢，推荐以下两个网站</p>
</blockquote>
<p><a href="https://bitbucket.org/product" target="_blank" rel="noopener">bitbucket</a></p>
<p>coding.net的免费网页IDE试用<a href="https://ide.coding.net/" target="_blank" rel="noopener">https://ide.coding.net/</a></p>
<p>2.安装依赖库</p>
<p>这里有两种方式可以选择：shell脚本一次安装，手动安装依赖库。</p>
<p>方法1. 执行sh脚本一步到位（不建议）</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">cd ~/torch; bash install-deps;</span><br></pre></td></tr></table></figure>

<p>优点：简单，不需要自己执行安装命令等</p>
<p>缺点：可能覆盖电脑上已经安装的一些库，主要是一些通过源码安装的包不会被yum和apt-get检测到，执行sh脚本的时候这些库会被再次安装，且版本和其他等不能保证和源码安装的一致。</p>
<p>方法2. 手动安装（推荐）</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">a. 打开 torch下的install-deps</span><br><span class="line">   vim ~/torch/install-deps</span><br><span class="line"></span><br><span class="line">b. 安装公共依赖库</span><br><span class="line">   可以看到首先需要安装openblas</span><br><span class="line">   sudo apt-get install libopenblas-dev //可以选择自己手动源码安装，centos换成libopenblas-devel</span><br><span class="line">   安装 openblas-lapack</span><br><span class="line"></span><br><span class="line">c. 基于自己的系统版本安装依赖库</span><br><span class="line">   在install-deps那里的Based on platform，找到自己版本对应的区域，这里以centos7为例，可以看到如下</span><br></pre></td></tr></table></figure>

<p><img alt data-src="http://i.imgur.com/LcqFc7Y.png"></p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">总结一下主要是下面这些包：</span><br><span class="line">        make cmake curl readline-devel ncurses-devel</span><br><span class="line">        gcc-c++ gcc-gfortran git gnuplot unzip</span><br><span class="line">        nodejs npm libjpeg-turbo-devel libpng-devel</span><br><span class="line">        ImageMagick GraphicsMagick-devel fftw-devel</span><br><span class="line">        sox-devel sox zeromq3-devel</span><br><span class="line">        qt-devel qtwebkit-devel sox-plugins-freeworld</span><br><span class="line">        ipython</span><br><span class="line">其中cmake、ImageMagick建议采用源码的方式安装不要通过yum安装，因为yum这两个包很老了。其他系统已经通过源码安装过的包都不需要安装。</span><br></pre></td></tr></table></figure>

<p>3.开始安装</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">cd ~/torch</span><br><span class="line">./install.sh</span><br><span class="line">安装最后会提示你是否将torch加入当前用户的path钟，输入yes即可</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">若仅供当前安装者使用torch，只需如下执行或者重开终端</span></span><br><span class="line">source ~/.bashrc    //更新</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">若是为机器所有用户安装torch使用，则需要如下</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line">添加如下：</span><br><span class="line">. /opt/torch/install/bin/torch-activate</span><br><span class="line">其实就是将刚刚提示是否添加到当前用户.bashrc里面的内容拷贝到系统层级下的</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<p>4.验证安装成功</p>
<p>如下图在终端输入th查看效果</p>
<p><img alt data-src="http://i.imgur.com/kXXSqDj.png"></p>
<p>5.利用luarocks安装包</p>
<blockquote>
<p>需要注意的是对于torch是安装到/opt/下，也即给所有用户使用的时候，利用luarocks安装包需要注意</p>
</blockquote>
<p>由于权限问题，你可能会尝试 <code>sudo luarocks install xxx</code> 会提示找不到luarocks，这时候如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先切换到root用户</span><br><span class="line">sudo su -</span><br><span class="line">再执行：</span><br><span class="line">luarocks install xx</span><br></pre></td></tr></table></figure>
<p>由于网络原因有时候会出现找不到包或者下载失败的情况，这时候可以在GitHub上手动下载下来，然后进入到文件夹内，执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">luarocks build xxx.rockspec</span><br></pre></td></tr></table></figure>
<p><strong>附. neural-style安装</strong></p>
<p>1.首先修改git</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">git config --global url."https://".insteadOf git://   //将ssh模式的git替换成https网址的避免git无法下载</span><br></pre></td></tr></table></figure>

<p>2.安装loadcaffe</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libprotobuf-dev protobuf-compiler</span><br><span class="line">luarocks install loadcaffe</span><br></pre></td></tr></table></figure>

<p>3.Install CUDA backend for torch</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">luarocks install cutorch</span><br><span class="line">luarocks install cunn</span><br></pre></td></tr></table></figure>

<p>4.Install Cudnn</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">luarocks install cudnn</span><br></pre></td></tr></table></figure>

<p>5.安装neural-style</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">cd ~/</span><br><span class="line">git clone https://github.com/jcjohnson/neural-style.git</span><br><span class="line">cd neural-style</span><br><span class="line">sh models/download_models.sh</span><br></pre></td></tr></table></figure>

<p>6.运行example</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">th neural_style.lua -gpu -1 -print_iter 1</span><br><span class="line">th neural_style.lua -gpu 0 -backend cudnn</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>torch</tag>
        <tag>centos</tag>
        <tag>服务器环境搭建</tag>
        <tag>CUDA</tag>
      </tags>
  </entry>
  <entry>
    <title>FFmpeg的使用</title>
    <url>/2016/07/25/usage-of-FFmpeg/</url>
    <content><![CDATA[<h2 id="1-使用FFmepg快速切割视频"><a href="#1-使用FFmepg快速切割视频" class="headerlink" title="1. 使用FFmepg快速切割视频"></a>1. 使用FFmepg快速切割视频</h2><p>优点：速度够快<br>缺点：如果切割的时间点不属于关键帧则会出现切割的视频开始部分停顿几秒<br>命令如下：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mkv -ss startTime -to endTime -c:v copy -c:a copy out.mkv</span><br><span class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$ubuntu_major_version</span> -lt <span class="string">'12'</span> ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'==&gt; Ubuntu version not supported.'</span></span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">        <span class="keyword">elif</span> [[ <span class="variable">$ubuntu_major_version</span> -lt <span class="string">'14'</span> ]]; <span class="keyword">then</span></span><br><span class="line">            sudo -E add-apt-repository -y ppa:chris-lea/zeromq</span><br><span class="line">            sudo -E add-apt-repository -y ppa:chris-lea/node.js</span><br><span class="line">        <span class="keyword">elif</span> [[ <span class="variable">$ubuntu_major_version</span> -lt <span class="string">'15'</span> ]]; <span class="keyword">then</span></span><br><span class="line">            sudo -E add-apt-repository -y ppa:jtaylor/ipython</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sudo apt-get install -y software-properties-common \</span><br><span class="line">                libgraphicsmagick1-dev nodejs npm libfftw3-dev sox libsox-dev \</span><br><span class="line">                libsox-fmt-all</span><br><span class="line">        <span class="keyword">fi</span></span><br></pre></td></tr></table></figure><a id="more"></a>


<p>其中statTime和endTime是形如：00：10：00这样的格式。<code>-c:v copy -c:a copy</code>代表复制原视频的视频和音频编码不做任何改变。<br>如果希望最后获得的视频正常则需要重新编码，如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mkv -ss startTime -to endTime -c:v libx264 out.mkv</span><br></pre></td></tr></table></figure>

<p>上述命令将最后输出的视频采用H.264编码重新编码。</p>
<h2 id="2-map指定分割视频的音频、视频、字幕流"><a href="#2-map指定分割视频的音频、视频、字幕流" class="headerlink" title="2. map指定分割视频的音频、视频、字幕流"></a>2. map指定分割视频的音频、视频、字幕流</h2><p>假设我们有一视频，现在需要复制它的视频流和字幕，将音频流按照MP3和acc分别编码，最后将这两个音频流压缩到输出视频中。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mkv \</span><br><span class="line">   	-map 0:0 -map 0:1 -map 0:1 -map 0:3 \</span><br><span class="line">    	-c:v copy \</span><br><span class="line">    	-c:a:0 libmp3lame -b:a:0 128k \</span><br><span class="line">    	-c:a:1 libfaac -b:a:1 96k \</span><br><span class="line">    	-c:s copy \</span><br><span class="line">    	output.mkv`</span><br></pre></td></tr></table></figure>

<p>其中-map 指定了需要使用的流。</p>
<h2 id="3-使用FFmpeg命令获取视频中的字幕-软字幕"><a href="#3-使用FFmpeg命令获取视频中的字幕-软字幕" class="headerlink" title="3. 使用FFmpeg命令获取视频中的字幕(软字幕)"></a>3. 使用FFmpeg命令获取视频中的字幕(软字幕)</h2><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">a.查看视频的信息</span><br><span class="line">  ffmpeg -i input.mkv</span><br></pre></td></tr></table></figure>

<p><img alt="演示图" data-src="http://upload-images.jianshu.io/upload_images/2457351-b21b7b5e09289087.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>从上图可以看到该视频有5个stream，其中stream 0是视频流，stream 1是audio，剩下的几个都是字幕流。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">ffmpeg -i Movie.mkv -map 0:s:0 subs.srt   //该命令会自动搜索字幕</span><br></pre></td></tr></table></figure>

<h2 id="4-将字幕嵌入到视频中"><a href="#4-将字幕嵌入到视频中" class="headerlink" title="4. 将字幕嵌入到视频中"></a>4. 将字幕嵌入到视频中</h2><p>方法1. 硬字幕嵌入（写入到视频帧中，能播放视频的即可显示字幕）</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">ffmpeg -i video.mkv -vf subtitles=subtitle.srt -codec:a copy output.mkv</span><br></pre></td></tr></table></figure>

<p>方法2. 软字幕（也即需要播放器支持字幕信息）</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">ffmpeg -i video.mkv -i subtitle.srt -codec copy -map 0 output.mkv</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>FFmpeg</tag>
        <tag>视频</tag>
      </tags>
  </entry>
  <entry>
    <title>实验室服务器环境搭建</title>
    <url>/2016/07/08/building-environment-of-server/</url>
    <content><![CDATA[<h2 id="1-制作启动U盘"><a href="#1-制作启动U盘" class="headerlink" title="1. 制作启动U盘"></a>1. 制作启动U盘</h2><p>准备工作：4G以上U盘一个，linux系统镜像iso，其中Ubuntu推荐安装长期支持版（LTS），centos推荐6.5或7这里采用的是7.<br>制作启动U盘：制作linux启动盘的软件很多，这里强烈推荐使用<code>rufus</code>这个小工具。主要这个对centos和Windows都很好的支持，像<code>universal usb installers</code>这个Ubuntu官网推荐的工具对centos的支持就不是很好，制作的启动盘不能直接启动，需要有些修改。<br>打开rufus软件并按照下图所示进行操作等待制作完毕即可。</p>
<p><img alt data-src="http://i.imgur.com/pcW6Go3.png"></p>
<h2 id="2-安装系统"><a href="#2-安装系统" class="headerlink" title="2. 安装系统"></a>2. 安装系统</h2><p>U盘插入电脑，开机选择U盘启动（这里一般会出现两个，一个是UEFI,一个是legacy，选择UEFI进去画面会清晰很多），进入install选项开始安装。后面的安装都是设置一些东西比较傻瓜式，记得不要勾选安装第三方软件，要不安装速度很慢。在分区这一步骤中选择something else，后面手动分区。分区记得home目录要大一点，所有的用户主目录都在这里。还有就是 /usr/local/ /tmp swap等，最后还得给boot设置一个分区，这样以后启动项丢失了还能找的回来。具体的分区方案可以参考百度谷歌别人的建议。对于Ubuntu在选择地区这里建议拔掉网线，有时候会因为这个原因卡死。</p>
<a id="more"></a>

<h2 id="3-配置软件源"><a href="#3-配置软件源" class="headerlink" title="3. 配置软件源"></a>3. 配置软件源</h2><p>！！！谨记不同版本的Ubuntu或者centos软件源是有点不一样的，一定要配置对应版本号的软件源。之所以配置软件源是因为默认的软件源服务器一般在国外，访问速度较慢。</p>
<h3 id="3-1-Ubuntu-14-04配置软件源"><a href="#3-1-Ubuntu-14-04配置软件源" class="headerlink" title="3.1 Ubuntu 14.04配置软件源"></a>3.1 Ubuntu 14.04配置软件源</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list_backup</span><br><span class="line">sudo gedit /etc/apt/sources.list</span><br><span class="line">在sources.list中增加以下内容</span><br><span class="line"><span class="meta">#</span><span class="bash">education ipv6 <span class="built_in">source</span></span></span><br><span class="line">deb http://mirrors6.ustc.edu.cn/ubuntu/ trusty main multiverse restricted universe</span><br><span class="line">deb http://mirrors6.ustc.edu.cn/ubuntu/ trusty-backports main multiverse restricted universe</span><br><span class="line">deb http://mirrors6.ustc.edu.cn/ubuntu/ trusty-proposed main multiverse restricted universe</span><br><span class="line">deb http://mirrors6.ustc.edu.cn/ubuntu/ trusty-security main multiverse restricted universe</span><br><span class="line">deb http://mirrors6.ustc.edu.cn/ubuntu/ trusty-updates main multiverse restricted universe</span><br><span class="line">deb-src http://mirrors6.ustc.edu.cn/ubuntu/ trusty main multiverse restricted universe</span><br><span class="line">deb-src http://mirrors6.ustc.edu.cn/ubuntu/ trusty-backports main multiverse restricted universe</span><br><span class="line">deb-src http://mirrors6.ustc.edu.cn/ubuntu/ trusty-proposed main multiverse restricted universe</span><br><span class="line">deb-src http://mirrors6.ustc.edu.cn/ubuntu/ trusty-security main multiverse restricted universe</span><br><span class="line">deb-src http://mirrors6.ustc.edu.cn/ubuntu/ trusty-updates main multiverse restricted universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line">-----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">更新软件源</span></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<h3 id="3-2-Centos-7配置软件源"><a href="#3-2-Centos-7配置软件源" class="headerlink" title="3.2 Centos 7配置软件源"></a>3.2 Centos 7配置软件源</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo //阿里云的镜像，资源还是比较多的</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache//生成缓存即可</span><br><span class="line">还有一些比较好用的国内源</span><br><span class="line">网易163：http://mirrors.163.com/.help/centos.html</span><br><span class="line">华中科技大学：http://mirrors.hust.edu.cn/help.html#centos</span><br><span class="line">浙江大学：http://mirrors.lifetoy.org/</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">添加RHEL源和一些国外源</span><br><span class="line">yum localinstall http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-6.noarch.rpm -y</span><br></pre></td></tr></table></figure>

<blockquote>
<p>有时候可能出现404错误，这是因为这个有更新了，打开<a href="http://dl.fedoraproject.org/pub/epel/7/x86_64/e/" target="_blank" rel="noopener">地址</a>搜索epel-release找到对应的地址替换即可。</p>
</blockquote>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">最后生成缓存即可：</span></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<h3 id="3-3-配置python的pip源"><a href="#3-3-配置python的pip源" class="headerlink" title="3.3 配置python的pip源"></a>3.3 配置python的pip源</h3><p>pip是一个python包安装工具，首先安装pip和python的一些库</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">yum install python-devel python-pip			// centos</span><br><span class="line">apt-get install python-dev python-pip		//Ubuntu</span><br></pre></td></tr></table></figure>

<p>默认的pip源也是速度超级慢，这里我们配置为豆瓣或者清华的源。centos和Ubuntu的配置是一样的。<br>首先我们切换到root用户。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">su</span><br><span class="line">mkdir ~/.pip</span><br><span class="line">gedit ~/.pip/pip.conf  //对于centos可以用vim ~/.pip/pip.conf, 可通过sudo yum install vim 安装vim</span><br><span class="line"><span class="meta">#</span><span class="bash">输入以下内容</span></span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host=pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面仅仅是修改了pip install安装时候的默认源，观察发现在使用setup.py的时候依然是使用的pypi.python.org，这里需要修改distutils的配置。同上切换到root。</p>
</blockquote>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">vim ~/.pydistutils.cfg</span><br><span class="line">输入：</span><br><span class="line">[easy_install]</span><br><span class="line">index_url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<p>这样以后安装的时候都是通过清华的镜像源，速度比较快。</p>
<h2 id="4-安装gcc-gcc-c-cmake"><a href="#4-安装gcc-gcc-c-cmake" class="headerlink" title="4. 安装gcc, gcc-c++, cmake"></a>4. 安装gcc, gcc-c++, cmake</h2><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line">yum install gcc-c++</span><br><span class="line"><span class="meta">#</span><span class="bash">去cmake官网下载源码包编译安装</span></span><br><span class="line">比如我这里下载的是</span><br><span class="line">cmake-3.5.2.tar.gz</span><br><span class="line">tar xzvf cmake-3.5.2.tar.gz</span><br><span class="line">cd cmake-3.5.2</span><br><span class="line">sudo ./bootstrap</span><br><span class="line">sudo gmake</span><br><span class="line">sudo make install</span><br><span class="line"><span class="meta">#</span><span class="bash">验证安装</span></span><br><span class="line">cmake -version</span><br></pre></td></tr></table></figure>

<p><img alt data-src="http://i.imgur.com/j4x3dNh.png"></p>
<h2 id="5-配置ssh和添加用户"><a href="#5-配置ssh和添加用户" class="headerlink" title="5. 配置ssh和添加用户"></a>5. 配置ssh和添加用户</h2><h3 id="5-1-Ubuntu-安装ssh-server"><a href="#5-1-Ubuntu-安装ssh-server" class="headerlink" title="5.1 Ubuntu 安装ssh server"></a>5.1 Ubuntu 安装ssh server</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br><span class="line">sudo ps -e |grep ssh   //查看ssh服务是否启动成功</span><br><span class="line">sudo service ssh start  //启动ssh服务</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置文件，设置root用户可以登入</span></span><br><span class="line">sudo gedit /etc/ssh/sshd_config</span><br><span class="line">注释掉下面这行语句：</span><br><span class="line"><span class="meta">#</span><span class="bash"> PermitRootLogin without-password</span></span><br><span class="line">并加入语句：</span><br><span class="line">PermitRootLogin yes</span><br><span class="line">重启ssh服务：</span><br><span class="line">sudo service ssh restart</span><br><span class="line">设置ssh服务开机自启动：</span><br><span class="line">打开/etc/rc.local文件，在exit 0语句前加入：</span><br><span class="line">/etc/init.d/ssh start</span><br></pre></td></tr></table></figure>

<h3 id="5-2-centos设置ssh-server"><a href="#5-2-centos设置ssh-server" class="headerlink" title="5.2 centos设置ssh server"></a>5.2 centos设置ssh server</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">centos默认已经安装了ssh server</span><br><span class="line">开启ssh服务：</span><br><span class="line">service sshd start</span><br><span class="line">设置ssh开机启动：</span><br><span class="line">chkconfig sshd on</span><br></pre></td></tr></table></figure>

<h3 id="5-3-添加用户"><a href="#5-3-添加用户" class="headerlink" title="5.3 添加用户"></a>5.3 添加用户</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">Ubuntu和Centos有点差别</span><br><span class="line">useradd 对于ubuntu只会创建用户不会在home目录下生成对应的用户文件。</span><br><span class="line">这里采用adduser</span><br><span class="line">修改用户密码</span><br><span class="line">sudo passwd user</span><br></pre></td></tr></table></figure>


<h2 id="6-用户主目录分区挂载"><a href="#6-用户主目录分区挂载" class="headerlink" title="6. 用户主目录分区挂载"></a>6. 用户主目录分区挂载</h2><p>对于每一个新建的用户，在/Home下会有对应的用户文件夹，考虑到数据的安全和可移植性，这里我们希望可以将用户目录挂载到系统盘外的盘上。</p>
<h3 id="6-1-利用parted对电脑其他盘进行分区和挂载到用户目录"><a href="#6-1-利用parted对电脑其他盘进行分区和挂载到用户目录" class="headerlink" title="6.1 利用parted对电脑其他盘进行分区和挂载到用户目录"></a>6.1 利用parted对电脑其他盘进行分区和挂载到用户目录</h3><p>首先需要对系统盘外的盘进行分区并格式化，利用<code>fdisk -l</code>查看电脑磁盘分布。这里我将5T的盘分成5个分区，对应的盘符是sdd</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">parted /dev/sdd</span><br><span class="line">mklabel</span><br><span class="line">输入gpt</span><br><span class="line">mkpart</span><br><span class="line">输入起始位置和结束位置</span><br><span class="line">！！！上面的操作都是不可逆的</span><br><span class="line">q退出</span><br><span class="line">mkfs.ext4 /dev/xx</span><br></pre></td></tr></table></figure>


<h3 id="6-2-开始挂载分区"><a href="#6-2-开始挂载分区" class="headerlink" title="6.2 开始挂载分区"></a>6.2 开始挂载分区</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">vim /etc/fstab</span><br><span class="line"><span class="meta">#</span><span class="bash"> 前面是对应的磁盘和要挂载到的地方，后面是文件系统等等。</span></span><br><span class="line">   /dev/sdd1 /home/qiudan	ext4	defaults0   0</span><br><span class="line">   /dev/sdd1 /home/qiudan	ext4	defaults0   0</span><br><span class="line">   /dev/sdd1 /home/qiudan	ext4	defaults0   0</span><br><span class="line">   /dev/sdd1 /home/qiudan	ext4	defaults0   0</span><br><span class="line">   /dev/sdd1 /home/qiudan	ext4	defaults0   0</span><br><span class="line"><span class="meta">#</span><span class="bash">查看fstab配置时候正确</span></span><br><span class="line">   mount –a</span><br><span class="line">   df -h</span><br><span class="line">   如果正确的话可以看到分区被正确挂载到对应的目录，下面把目录权限给对应的用户：</span><br><span class="line">   sudo chown -R xx:xx xx</span><br></pre></td></tr></table></figure>


<p>这个时候切换到对应的用户会发现终端没有显示用户名，这是因为我们挂载的分区缺少一些用户文件，可以通过拷贝获得，并记得授权权限。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo cp –R /etc/skel/. /home/xxx</span><br><span class="line">sudo chown xx:xx  home/xx/.bash*</span><br></pre></td></tr></table></figure>

<h2 id="7-配置-ftp"><a href="#7-配置-ftp" class="headerlink" title="7. 配置 ftp"></a>7. 配置 <a href="https://help.ubuntu.com/lts/serverguide/ftp-server.html" target="_blank" rel="noopener">ftp</a></h2><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vsftpd</span><br><span class="line">vim /etc/vsftpd.conf</span><br><span class="line">anonymous_enable=Yes</span><br><span class="line">sudo mkdir /srv/files/ftp //希望的ftp文件夹位置</span><br><span class="line">sudo usermod -d /srv/files/ftp ftp //修改ftp文件夹位置配置</span><br><span class="line">sudo restart vsftpd//重启ftp</span><br></pre></td></tr></table></figure>

<h2 id="8-安装CUDA-cudNNs"><a href="#8-安装CUDA-cudNNs" class="headerlink" title="8. 安装CUDA, cudNNs"></a>8. 安装CUDA, cudNNs</h2><blockquote>
<p><strong>没必要提前安装nvidia显卡驱动，cuda里面已经带了，可以在安装CUDA的时候勾选安装驱动选项即可</strong></p>
</blockquote>
<p>在安装cuda之前需要先检查下本机是否支持cuda：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure>

<p>验证<code>gcc</code>是否安装：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">gcc --version</span><br></pre></td></tr></table></figure>
<p>如果没有安装：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure>

<p>安装内核头文件和开发包：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo yum install kernel-devel-$(uname -r) kernel-headers-$(uname -r)</span><br></pre></td></tr></table></figure>

<p>接下来：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">a.禁用自带的显卡驱动：</span><br><span class="line">  Vim /etc/modprobe.d/blacklist.conf</span><br><span class="line">   输入以下内容：</span><br><span class="line">    blacklist nouveau</span><br><span class="line">    options nouveau modeset=0</span><br><span class="line">   -------------------------------------------------</span><br><span class="line">	更新内核启动参数：</span><br><span class="line">    sudo update-initramfs -u		//Ubuntu</span><br><span class="line">	sudo dracut --force				//Centos</span><br><span class="line"></span><br><span class="line">b.关闭图形界面</span><br><span class="line">  其中Ubuntu可以参考[1](http://blog.csdn.net/a1311543690/article/details/48861237)</span><br><span class="line">  centos 7图形和命令提示符界面切换：</span><br><span class="line">  systemctl set-default multi-user.target //命令提示符</span><br><span class="line">  systemctl set-default graphical.target  //图形界面</span><br><span class="line">c.重启开始安装cuda(这里我们选择的是.run file进行安装的)</span><br><span class="line">  sudo ./cuda_7.5.18_linux.run  --no-opengl-libs (不要安装opengl这会覆盖cpu中集成显卡的opengl库导致装完进不了图形界面)</span><br><span class="line">首先driver是肯定要安装的，tookit也是要安装的，sample可选，建议安装下，路径的除了sample都用默认的即/usr/local/cuda</span><br></pre></td></tr></table></figure>


<blockquote>
<p>安装中按ctrl+c可以跳过长长的阅读协议部分。安装完毕，设置开启图形界面重启ok</p>
</blockquote>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">d.安装cudNN( 这里需要注意，最新版本的可能会不兼容caffe，本文采用cudnn4)</span><br><span class="line">	下载x64位的cudnn压缩包。</span><br><span class="line">    tar xvzf cudnn-7.0-linux-x64-v4.0-prod.tgz</span><br><span class="line">    sudo cp cuda/include/cudnn.h /usr/local/cuda/include</span><br><span class="line">    sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64</span><br><span class="line">    拷贝完这些文件后还需要注意，重新生成链接文件并赋予对应的权限。</span><br><span class="line">	cd /usr/local/cuda/lib64</span><br><span class="line">	rm -rf libcudnn.so libcudnn.so.4   //删除原来的链接</span><br><span class="line">    chmod u=rwx,g=rx,o=rx libcudnn.so.4.0.7 //对目标文件放开权限</span><br><span class="line">    ln -s libcudnn.so.4.0.7 libcudnn.so.4  //设置链接</span><br><span class="line">    ln -s libcudnn.so.4.0.7 libcudnn.so   //同上</span><br><span class="line">e.配置cuda的环境变量：</span><br><span class="line">	PATH变量:</span><br><span class="line">	vim /etc/profile</span><br><span class="line">	输入下面内容：</span><br><span class="line">	PATH=/usr/local/cuda/bin:$PATH</span><br><span class="line">	export PATH</span><br><span class="line">	更新环境变量：</span><br><span class="line">	source /etc/profile</span><br><span class="line">	lib变量:</span><br><span class="line">	cd /etc/ld.so.conf.d/</span><br><span class="line">	vim cuda.conf</span><br><span class="line">	输入下面内容：</span><br><span class="line">	/usr/local/cuda/lib64</span><br><span class="line">	更新环境变量：</span><br><span class="line">	sudo ldconfig</span><br></pre></td></tr></table></figure>

<h2 id="9-安装FFmpeg"><a href="#9-安装FFmpeg" class="headerlink" title="9. 安装FFmpeg"></a>9. 安装FFmpeg</h2><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">----安装一些依赖库---------------</span><br><span class="line"><span class="meta">#</span><span class="bash">安装汇编指令集yasm（必须）</span></span><br><span class="line">sudo yum install yasm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装libass（可选）</span></span><br><span class="line">sudo yum install libass-devel libav*</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装H.264编码器 （可选）</span></span><br><span class="line">从 http://www.videolan.org/developers/x264.html 下载源码包</span><br><span class="line"><span class="meta">#</span><span class="bash">解压源码包</span></span><br><span class="line">tar -xjvf /path/to/x264-snapshot-20080805-2245.tar.bz2</span><br><span class="line"><span class="meta">#</span><span class="bash">开始configure并安装H.264</span></span><br><span class="line">cd /path/to/x264-dir</span><br><span class="line">./configure --enable-shared</span><br><span class="line">make -j8</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上述安装完毕后还需配置x264的lib到系统path变量，否则运行ffmpeg会出现 error while loading shared libraries: libavdevice.so.52: cannot open shared object file: No such file or directory</p>
</blockquote>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置x264</span></span><br><span class="line">sudo vim /etc/ld.so.conf.d/custom-libs.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加/usr/<span class="built_in">local</span>/lib 到系统的lib索引</span></span><br><span class="line">/usr/local/lib</span><br><span class="line"><span class="meta">#</span><span class="bash"> update to make it work</span></span><br><span class="line">sudo ldconfig</span><br><span class="line">sudo updatedb</span><br><span class="line"></span><br><span class="line">---开始安装FFmpeg----------</span><br><span class="line"><span class="meta">#</span><span class="bash">下载FFmpeg源码包</span></span><br><span class="line">git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg</span><br><span class="line"><span class="meta">#</span><span class="bash">configure</span></span><br><span class="line">cd FFmpeg-master</span><br><span class="line">sudo ./configure --enable-libass --enable-libx264 --enable-gpl --enable-shared --prefix=/usr/local/ffmpeg</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上述命令按照需要修改，如果没安装libass和x264则不要enable否则会出错</p>
</blockquote>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">开始make</span></span><br><span class="line">make -j8</span><br><span class="line">sudo make install  //因为安装到的路径是 /usr/local/ 需要root权限</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置FFmpeg的lib库</span></span><br><span class="line">sudo vim /etc/ld.so.conf.d/ffmpeg.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">输入以下内容：</span></span><br><span class="line">/usr/local/ffmpeg/lib/   // /usr/local/ 和上面configure设置的路径要一致</span><br><span class="line"><span class="meta">#</span><span class="bash">保存并使之生效</span></span><br><span class="line">sudo ldconfig</span><br><span class="line"><span class="meta">#</span><span class="bash">设置ffmpeg的path变量</span></span><br><span class="line">sudo vim /etc/profile/</span><br><span class="line">export PATH=/usr/local/ffmpeg/bin:$PATH</span><br><span class="line"><span class="meta">#</span><span class="bash">添加路径到PKG_CONFIG_PATH</span></span><br><span class="line">sudo yum install pkgconfig.x86_64  //可能未安装PKG_CONFIG_PATH</span><br><span class="line">sudo vim /etc/profile/</span><br><span class="line">export PKG_CONFIG_PATH=/usr/local/ffmpeg/lib/pkgconfig:$PKG_CONFIG_PATH</span><br><span class="line"><span class="meta">#</span><span class="bash">保存并生效，更新db</span></span><br><span class="line">source /etc/profile</span><br><span class="line">sudo updatedb   //有时候添加到了环境变量不生效，但是又不能重启，执行该条命令很有效。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看ffmpeg版本</span></span><br><span class="line">ffmpeg -version</span><br><span class="line"><span class="meta">#</span><span class="bash">比如我这台电脑如下：</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">[zhengbo@mediaszu ~]$ ffmpeg -version</span><br><span class="line">ffmpeg version 3.0.git Copyright (c) 2000-2016 the FFmpeg developers</span><br><span class="line">built with gcc 4.8.5 (GCC) 20150623 (Red Hat 4.8.5-4)</span><br><span class="line">configuration: --enable-shared --prefix=/usr/local/ffmpeg</span><br><span class="line">libavutil      55. 28.100 / 55. 28.100</span><br><span class="line">libavcodec     57. 48.102 / 57. 48.102</span><br><span class="line">libavformat    57. 41.100 / 57. 41.100</span><br><span class="line">libavdevice    57.  0.102 / 57.  0.102</span><br><span class="line">libavfilter     6. 47.100 /  6. 47.100</span><br><span class="line">libswscale      4.  1.100 /  4.  1.100</span><br><span class="line">libswresample   2.  1.100 /  2.  1.100</span><br><span class="line">------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<h2 id="10-源码编译安装opencv-2-4-xx"><a href="#10-源码编译安装opencv-2-4-xx" class="headerlink" title="10. 源码编译安装opencv 2.4.xx"></a>10. 源码编译安装opencv 2.4.xx</h2><p>在正式安装opencv之前需要安装一些依赖包，下面是<a href="http://docs.opencv.org/2.4/doc/tutorials/introduction/linux_install/linux_install.html" target="_blank" rel="noopener">官网</a>给出的指南：<br><img alt data-src="http://i.imgur.com/YzjDfOH.png"></p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> GCC和ffmpeg还有pkg-config，python-dev前面已经安装</span></span><br><span class="line">sudo yum install gtk2 gtk2-devel gtk2-devel-docs</span><br><span class="line">sudo pip install numpy</span><br><span class="line">sudo yum install libjpg-devel libpng-devel libtiff-devel libjasper-devel</span><br></pre></td></tr></table></figure>

<p>下载opencv的源码包，比如我下载的是<code>opencv-2.4.13.zip</code></p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压源码包</span></span><br><span class="line">unzip opencv-2.4.13.zip -d ~/</span><br><span class="line"><span class="meta">#</span><span class="bash">进入源码包</span></span><br><span class="line">cd ~/opecv-2.4.13</span><br><span class="line">mkdir release</span><br><span class="line">cd release</span><br><span class="line"><span class="meta">#</span><span class="bash">开始设置cmake</span></span><br><span class="line">cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local ..   //注意后面有两个点</span><br><span class="line"><span class="meta">#</span><span class="bash">等待片刻后可以看到生成了Makefile，下面开始make，可以开启多线程</span></span><br><span class="line">make -j8</span><br><span class="line"><span class="meta">#</span><span class="bash">开始安装</span></span><br><span class="line">sudo make install</span><br><span class="line"><span class="meta">#</span><span class="bash">因为上面的安装路径设置的是<span class="string">"/usr/local/"</span>,故此path不需要额外配置环境变量。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">下面配置lib变量和注册下包的信息</span></span><br><span class="line">sudo vim /etc/ld.so.conf.d/custom-libs.conf   //名字任意</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加/usr/<span class="built_in">local</span>/lib 到系统的lib索引，如果之前有添加过则不用</span></span><br><span class="line">/usr/local/lib</span><br><span class="line"><span class="meta">#</span><span class="bash"> update to make it work</span></span><br><span class="line">sudo ldconfig</span><br><span class="line">sudo updatedb</span><br><span class="line"><span class="meta">#</span><span class="bash">配置PKG_CONFIG_PATH</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line">export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH</span><br><span class="line"><span class="meta">#</span><span class="bash">保存后<span class="built_in">source</span>，更新db</span></span><br><span class="line">source /etc/profile</span><br><span class="line">sudo updatedb</span><br><span class="line"><span class="meta">#</span><span class="bash">查看opencv版本信息</span></span><br><span class="line">pkg-config --modversion opencv</span><br><span class="line"><span class="meta">#</span><span class="bash">比如我的出现下面</span></span><br><span class="line">2.4.13</span><br></pre></td></tr></table></figure>

<p>下面继续配置opencv的python接口，参考<a href="http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_setup/py_setup_in_fedora/py_setup_in_fedora.html#install-opencv-python-in-fedora" target="_blank" rel="noopener">官网</a>，由于我们opencv采用的是源码安装，所以只需要将一些文件拷贝到python包下即可。</p>
<blockquote>
<p>需要注意的是python-devel包需要安装，否则源码编译安装的opencv没有python接口</p>
</blockquote>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">方法1，拷贝文件</span></span><br><span class="line">sudo cp /usr/local/lib/python2.7/site-packages/cv2.so /usr/lib/python2.7/site-packages</span><br><span class="line"><span class="meta">#</span><span class="bash">方法2，添加路径到PATH</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line">export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python2.7/site-packages</span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash">测试接口</span></span><br><span class="line">python</span><br><span class="line">import cv2</span><br><span class="line">print cv2.__version__</span><br></pre></td></tr></table></figure>

<h2 id="11-安装tensorflow"><a href="#11-安装tensorflow" class="headerlink" title="11. 安装tensorflow"></a>11. 安装tensorflow</h2><p>方法1.源码安装  –&gt;主要针对cundnn5需要源码安装，官方编译好的并不支持cudnn5</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">a. 安装Bazel，这里我们选择源码安装</span><br><span class="line">安装之前需要先配置JAVA的环境变量，因为系统默认安装的是openjdk并没有配置JAVA_HOME</span><br><span class="line">这里我选择先删除系统自带的openjdk，安装官方的JDK8</span><br><span class="line"><span class="meta">#</span><span class="bash">查询系统自带的jdk有哪些</span></span><br><span class="line">	rpm -qa | grep jdk</span><br><span class="line"><span class="meta">#</span><span class="bash">开始删除</span></span><br><span class="line">	sudo yum remove name //name是上面查出的包的名字，可以用通配符匹配删除所有的</span><br><span class="line"><span class="meta">#</span><span class="bash">安装Oracle JDK8</span></span><br><span class="line"><span class="meta">#</span><span class="bash">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</span></span><br><span class="line"><span class="meta">#</span><span class="bash">选择linux 64位的tar.gz包，比如这里我下载的是<span class="string">'jdk-8u91-linux-x64.tar.gz'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">解压所，建议放到/usr/<span class="built_in">local</span></span></span><br><span class="line">   tar tar zxvf jdk*.tar.gz -C /usr/local/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置环境变量,注意文件夹名字</span></span><br><span class="line">  sudo vim /etc/profile</span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="built_in">set</span> java environment</span></span><br><span class="line">  export JAVA_HOME=/usr/local/jdk1.8.0_60   </span><br><span class="line">  export JRE_HOME=/usr/local/jdk1.8.0_60/jre  </span><br><span class="line">  export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH   </span><br><span class="line">  export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$JAVA_HOME:$PATH</span><br><span class="line"><span class="meta">#</span><span class="bash">更新</span></span><br><span class="line">  source /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash">验证</span></span><br><span class="line">  java -version</span><br><span class="line"><span class="meta">#</span><span class="bash">下载bazel源码包</span></span><br><span class="line">  git clone https://github.com/bazelbuild/bazel.git</span><br><span class="line">  cd bazel</span><br><span class="line">  ./compile.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">等待几分钟后完毕，生成一个bazel的可执行文件</span></span><br><span class="line">  sudo cp ~/bazel-master/output/bazel /usr/local/bin</span><br><span class="line">b.下载tensorflow源码包</span><br><span class="line">	git clone https://github.com/tensorflow/tensorflow</span><br><span class="line">	cd tensorflow-master</span><br><span class="line">	./configure</span><br></pre></td></tr></table></figure>


<p>如下图：</p>
<p><img alt data-src="http://i.imgur.com/vMM1LWG.png"></p>
<blockquote>
<p>这里我们直接回车即可，没必要像上图单独指定，采用default即可。</p>
</blockquote>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">c.build 源码包并生成pip安装包</span><br><span class="line">  bazel build -c opt --config=cuda //tensorflow/tools/pip_package:build_pip_package</span><br><span class="line">  上述命令需要下载，需等待片刻</span><br><span class="line"><span class="meta">  #</span><span class="bash">生成 pip安装包</span></span><br><span class="line">  bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg</span><br><span class="line"><span class="meta">  #</span><span class="bash">pip安装tensorflow</span></span><br><span class="line">  sudo pip install /tmp/tensorflow_pkg/tensorflow-0.9.0-py2-none-any.whl</span><br><span class="line"></span><br><span class="line">d. 测试安装</span><br><span class="line"> cd tensorflow-master/models/image/mnist</span><br><span class="line"> python convolutional.py</span><br><span class="line"><span class="meta"> #</span><span class="bash">出现下面界面说明安装成功</span></span><br><span class="line"> Successfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.</span><br><span class="line"> Successfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.</span><br><span class="line"> Successfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.</span><br><span class="line"> Successfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.</span><br><span class="line"> Extracting data/train-images-idx3-ubyte.gz</span><br><span class="line"> Extracting data/train-labels-idx1-ubyte.gz</span><br><span class="line"> Extracting data/t10k-images-idx3-ubyte.gz</span><br><span class="line"> Extracting data/t10k-labels-idx1-ubyte.gz</span><br><span class="line"> Initialized!</span><br><span class="line"> Epoch 0.00</span><br><span class="line"> Minibatch loss: 12.054, learning rate: 0.010000</span><br><span class="line"> Minibatch error: 90.6%</span><br><span class="line"> Validation error: 84.6%</span><br><span class="line"> Epoch 0.12</span><br><span class="line"> Minibatch loss: 3.285, learning rate: 0.010000</span><br><span class="line"> Minibatch error: 6.2%</span><br><span class="line"> Validation error: 7.0%</span><br><span class="line"> ....</span><br></pre></td></tr></table></figure>


<p>方法2. 通过pip安装官方已经编译好的文件</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">a.下载whl</span><br><span class="line">	下载官方编译好的python安装包</span><br><span class="line">	地址[1](https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.9.0-cp27-none-linux_x86_64.whl)</span><br><span class="line">	地址[2](https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.9.0-cp27-none-linux_x86_64.whl)</span><br><span class="line">	地址1仅仅支持cpu，这里我们选择支持GPU的地址2</span><br><span class="line"></span><br><span class="line">b.开始安装</span><br><span class="line">	pip install --upgrade tensorflow-0.9.0-cp27-none-linux_x86_64.whl</span><br><span class="line"><span class="meta">	#</span><span class="bash">上述命令会安装python的一些其他包</span></span><br><span class="line">	numpy, protobuf, wheel, setuptools</span><br><span class="line">	如果中间有安装失败的包，自己手动安装即可。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里需要注意的是，如果python当前采用的是Anaconda python，那么在安装setuptools的时候有可能出现 Cannot remove entries from nonexistent file, 这其实是Anaconda的一个bug，主要原因是关于setuptools的一个文件不存在。解决方法如下</p>
</blockquote>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">c.Anaconda python 升级setuptools</span><br><span class="line">  去pypi官网 https://pypi.python.org/pypi/setuptools#using-setuptools-and-easyinstall</span><br><span class="line">  下载ez_setup.py</span><br><span class="line">  python ez_setup.py</span><br><span class="line"></span><br><span class="line">等待片刻成功安装setuptools最新版，并不报错，再执行命令安装tensorflow即可！</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>centos</tag>
        <tag>服务器环境搭建</tag>
        <tag>CUDA</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用问题小结</title>
    <url>/2015/12/24/usage-of-hexo/</url>
    <content><![CDATA[<p>使用hexo的时候一重启电脑关闭终端就出现&gt;hexo command not found<br>解决方法：首先查看 nodejs版本</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">nvm ls            // 查看出来的结果</span><br><span class="line">nvm use 0.10.35  // 用对应的代替</span><br></pre></td></tr></table></figure>

<p>为了方便可以在<code>/etc/rc.local</code>文件指定：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">nvm use 0.10.35</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
  </entry>
  <entry>
    <title>Centos7切换图形界面和命令提示符界面</title>
    <url>/2015/12/06/switch-graphic-text/</url>
    <content><![CDATA[<blockquote>
<p>CentOS 7 之前的版本是通过 /etc/inittab 文件来定义系统运行级别<br>CentOS 7 版本不再使用该文件定义系统运行级别,相关运行级别设置无效<br>新版本的运行级别都定义在 /lib/systemd/system下:  </p>
</blockquote><p>针对不同的需要设置不同的运行级别方法如下：  </p><p><strong>！！！注意都需要切换到root才行</strong>  </p><a id="more"></a>


<h2 id="1-设置命令提示符模式"><a href="#1-设置命令提示符模式" class="headerlink" title="1. 设置命令提示符模式"></a>1. 设置命令提示符模式</h2><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">ln -sf /lib/systemd/system/runlevel3.target /etc/systemd/system/default.target</span><br><span class="line">或</span><br><span class="line">ln -sf /lib/systemd/system/multi-user.target /etc/systemd/system/default.target</span><br><span class="line">或</span><br><span class="line">systemctl set-default multi-user.target</span><br></pre></td></tr></table></figure>

<h2 id="2-设置图像用户界面"><a href="#2-设置图像用户界面" class="headerlink" title="2. 设置图像用户界面"></a>2. 设置图像用户界面</h2><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">ln -sf /lib/systemd/system/runlevel5.target /etc/systemd/system/default.target  </span><br><span class="line">或  </span><br><span class="line">ln -sf /lib/systemd/system/graphical.target /etc/systemd/system/default.target</span><br><span class="line">或  </span><br><span class="line">systemctl set-default graphical.target</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>Centos</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7配置软件源</title>
    <url>/2015/12/05/setting-centos-source/</url>
    <content><![CDATA[<p>刚从ubuntu换到centos7，很多软件需要自己下载，但是centos自带的源经常收不到对应的软件和包。配置软件源需要到<code>/etc/yum.repos.d/</code>目录下修改repo文件；</p><h2 id="1-先备份原来的软件源（需要root权限"><a href="#1-先备份原来的软件源（需要root权限" class="headerlink" title="1. 先备份原来的软件源（需要root权限)"></a>1. 先备份原来的软件源（需要root权限)</h2><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure><a id="more"></a>



<h2 id="2-下载第三方的软件源添加进去"><a href="#2-下载第三方的软件源添加进去" class="headerlink" title="2. 下载第三方的软件源添加进去"></a>2. 下载第三方的软件源添加进去</h2><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo //阿里云的镜像，资源还是比较多的</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache    //生成缓存即可</span><br></pre></td></tr></table></figure>

<p>还有一些比较好用的国内源</p>
<p>网易163：<a href="http://mirrors.163.com/.help/centos.html" target="_blank" rel="noopener">http://mirrors.163.com/.help/centos.html</a></p>
<p>华中科技大学：<a href="http://mirrors.hust.edu.cn/help.html#centos" target="_blank" rel="noopener">http://mirrors.hust.edu.cn/help.html#centos</a></p>
<p>浙江大学：<a href="http://mirrors.lifetoy.org/" target="_blank" rel="noopener">http://mirrors.lifetoy.org/</a></p>
<h2 id="3-添加RHEL源和一些国外源"><a href="#3-添加RHEL源和一些国外源" class="headerlink" title="3. 添加RHEL源和一些国外源"></a>3. 添加RHEL源和一些国外源</h2><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">yum localinstall http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-6.noarch.rpm -y</span><br></pre></td></tr></table></figure>

<blockquote>
<p>有时候可能出现404错误，这是因为这个有更新了，打开地址<a href="http://dl.fedoraproject.org/pub/epel/7/x86_64/e/" target="_blank" rel="noopener">http://dl.fedoraproject.org/pub/epel/7/x86_64/e/</a>搜索epel-release找到对应的地址替换即可.</p>
</blockquote>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">cd /etc/yum.repos.d/</span><br><span class="line">vim puias-computational.repo</span><br><span class="line">输入下面这些：</span><br><span class="line">[PUIAS_computational]</span><br><span class="line">name=PUIAS computational Base $releasever - $basearch</span><br><span class="line">mirrorlist=http://puias.math.ias.edu/data/puias/computational/$releasever/$basearch/mirrorlist</span><br><span class="line"><span class="meta">#</span><span class="bash">baseurl=http://puias.math.ias.edu/data/puias/computational/<span class="variable">$releasever</span>/<span class="variable">$basearch</span></span></span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-puias</span><br></pre></td></tr></table></figure>

<p>导入key：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">rpm --import http://puias.princeton.edu/data/puias/7/x86_64/os/RPM-GPG-KEY-puias</span><br></pre></td></tr></table></figure>

<p>产生缓存：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br><span class="line">sudo yum update</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://www.linuxidc.com/Linux/2015-03/114690.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2015-03/114690.htm</a></li>
</ol>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>deep learning</tag>
        <tag>caffe</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>install caffe in Ubuntu 14.04</title>
    <url>/2015/11/11/install-caffe-in-ubuntu-14-04/</url>
    <content><![CDATA[<p>深度学习的框架很多，有Theano、keras、DeepLearnToolBox等等，caffe主要注重模块化和运行速度，是目前引用率较高的一个工具箱。<br>本次环境的搭建是在<strong>ubuntu14.04</strong>下搭建。参照官方的安指南<a href="http://caffe.berkeleyvision.org/install_apt.html" target="_blank" rel="noopener">Ubuntu Installation</a></p>
<h2 id="1-安装依赖库"><a href="#1-安装依赖库" class="headerlink" title="1. 安装依赖库"></a>1. 安装依赖库</h2><p>这一步主要是安装opencv库、google的protobuf、boost、等等。这些都只需要一步搞定：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler</span><br><span class="line">sudo apt-get install --no-install-recommends libboost-all-dev</span><br></pre></td></tr></table></figure>

<p>需要注意的是两条命令最好分开执行，两条复制进console可能出现boost没有安装。</p>
<h2 id="2-安装-BLAS、Imdb等"><a href="#2-安装-BLAS、Imdb等" class="headerlink" title="2. 安装 BLAS、Imdb等"></a>2. 安装 BLAS、Imdb等</h2><p>首先安装 <strong>BLAS</strong>，一共有三种可以选择 <strong>ATLAS</strong>、 <strong>OpenBLAS **和</strong>MKL**，主要的差别在对cpu的调用上，要获得更好的cpu表现就安装OpenBlas或Intel公司的MKL。</p>
<p>a. 安装 ATLAS</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libatlas-base-dev</span><br></pre></td></tr></table></figure>

<p>b. 安装 OpenBLAS</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libopenblas-dev</span><br></pre></td></tr></table></figure>

<p>c. 安装MKL</p>
<p>这个是Intel自己开发的工具，是收费的，学生用户可以注册下载，安装包也很大，建议按照<a href="http://www.cnblogs.com/platero/p/3993877.html" target="_blank" rel="noopener" title="比较详细的教程">参考1</a>的安装方法<br>上面三个选一个安装即可，没必要都安装。<br>安装剩下的依赖库：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</span><br></pre></td></tr></table></figure>

<p>如果你不需要python接口的caffe和cuda，可直接跳到编译步骤。</p>
<a id="more"></a>

<h2 id="3-安装cuda和cudann"><a href="#3-安装cuda和cudann" class="headerlink" title="3.安装cuda和cudann"></a>3.安装cuda和cudann</h2><blockquote>
<p><strong>没必要提前安装nvidia显卡驱动，cuda里面已经带了，可以在安装CUDA的时候勾选安装驱动选项即可</strong></p>
</blockquote>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">a.禁用自带的显卡驱动：</span><br><span class="line">  Vim /etc/modprobe.d/blacklist.conf</span><br><span class="line">  输入以下内容：</span><br><span class="line">  blacklist nouveau</span><br><span class="line">  options nouveau modeset=0</span><br><span class="line">  -------------------------------------------------</span><br><span class="line">  更新内核启动参数：</span><br><span class="line">  sudo update-initramfs -u		//Ubuntu</span><br><span class="line">  sudo dracut --force				//Centos</span><br><span class="line"></span><br><span class="line">b.关闭图形界面</span><br><span class="line">  其中Ubuntu可以参考[1](http://blog.csdn.net/a1311543690/article/details/48861237)</span><br><span class="line">  centos 7图形和命令提示符界面切换：</span><br><span class="line">  systemctl set-default multi-user.target //命令提示符</span><br><span class="line">  systemctl set-default graphical.target  //图形界面</span><br><span class="line">c.重启开始安装cuda(这里我们选择的是.run file进行安装的)</span><br><span class="line">  查看gcc时候安装</span><br><span class="line">  gcc --version</span><br><span class="line">  如果没安装需要手动安装之！</span><br><span class="line">  sudo ./cuda_7.5.18_linux.run  --no-opengl-libs (不要安装opengl这会覆盖cpu中集成显卡的opengl库导致装完进不了图形界面)</span><br><span class="line">  首先driver是肯定要安装的，tookit也是要安装的，sample可选，建议安装下，路径的除了sample都用默认的即/usr/local/cuda</span><br></pre></td></tr></table></figure>


<blockquote>
<p>安装中按ctrl+c可以跳过长长的阅读协议部分。安装完毕，设置开启图形界面重启ok</p>
</blockquote>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">d.安装cudNN( 这里需要注意，最新版本的可能会不兼容caffe，本文采用cudnn4)</span><br><span class="line">  下载x64位的cudnn压缩包。</span><br><span class="line">   tar xvzf cudnn-7.0-linux-x64-v4.0-prod.tgz</span><br><span class="line">   sudo cp cuda/include/cudnn.h /usr/local/cuda/include</span><br><span class="line">   sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64</span><br><span class="line">   拷贝完这些文件后还需要注意，重新生成链接文件并赋予对应的权限。</span><br><span class="line">   cd /usr/local/cuda/lib64</span><br><span class="line">   rm -rf libcudnn.so libcudnn.so.4   //删除原来的链接</span><br><span class="line">   chmod u=rwx,g=rx,o=rx libcudnn.so.4.0.7 //对目标文件放开权限</span><br><span class="line">   ln -s libcudnn.so.4.0.7 libcudnn.so.4  //设置链接</span><br><span class="line">   ln -s libcudnn.so.4.0.7 libcudnn.so   //同上</span><br><span class="line">e.配置cuda的环境变量：</span><br><span class="line">  PATH变量:</span><br><span class="line">  vim /etc/profile</span><br><span class="line">  输入下面内容：</span><br><span class="line">  PATH=/usr/local/cuda/bin:$PATH</span><br><span class="line">  export PATH</span><br><span class="line">  更新环境变量：</span><br><span class="line">  source /etc/profile</span><br><span class="line">  lib变量:</span><br><span class="line">  cd /etc/ld.so.conf.d/</span><br><span class="line">  vim cuda.conf</span><br><span class="line">  输入下面内容：</span><br><span class="line">  /usr/local/cuda/lib64</span><br><span class="line">  更新环境变量：</span><br><span class="line">  sudo ldconfig</span><br></pre></td></tr></table></figure>


<h2 id="4-编译caffe并测试"><a href="#4-编译caffe并测试" class="headerlink" title="4. 编译caffe并测试"></a>4. 编译caffe并测试</h2><p>a.下载caffe</p>
<p>首先进入你希望caffe放置的位置然后：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/BVLC/caffe.git</span><br></pre></td></tr></table></figure>

<p>b.对 Makefile 文件修改</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">cp Makefile.config.example Makefile.config</span><br><span class="line">vim Makefile.config</span><br></pre></td></tr></table></figure>

<p>修改的部分主要有：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">-&gt;</span><span class="bash">去掉use cudann 前面的 `<span class="comment">#`注释</span></span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash">因为是安装的openblas，所以还需要修改 BLAS := open</span></span><br><span class="line"><span class="meta">-&gt;</span><span class="bash">需要matlab接口的，先安装matlab，详见[[1]](http://www.cnblogs.com/platero/p/3993877.html)然后修改Makefile.config里面的 -&gt;MATLAB_DIR := /usr/<span class="built_in">local</span> 为 MATLAB_DIR := /usr/<span class="built_in">local</span>/MATLAB/R2014b (对照改成你MATLAB安装的位置)</span></span><br></pre></td></tr></table></figure>


<p>c.开始编译和测试</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">cd caffe-folder</span><br><span class="line">make all -j8 // 8 代表的是线程数，可以加快编译速度</span><br><span class="line">make matcaffe //编译matlab接口</span><br><span class="line"><span class="meta">#</span><span class="bash">开始测试，该步骤可选需要时间教长，对使用无影响，仅用于测试安装是否成功。</span></span><br><span class="line">make test -j8 //编译测试需要的文件</span><br><span class="line">make runtest  // 开始运行测试例子</span><br></pre></td></tr></table></figure>

<h2 id="5-安装python接口"><a href="#5-安装python接口" class="headerlink" title="5. 安装python接口"></a>5. 安装python接口</h2><p>caffe具有python调用的接口，如果需要还得安装一些第三方库，有两种方式可以选择：一是利用linux系统自带的python，然后手动安装一些第三方的包，二是安装Anaconda python。下面分别介绍这两种方法。</p>
<p><strong>a.</strong> 利用系统自带的python，优点是安装完成后所有用户可以用，缺点很多第三方的库python包需要自己安装，操作不当还有可能破坏系统的python环境。</p>
<p>首先安装 python-dev、pip</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-dev python-pip git</span><br></pre></td></tr></table></figure>

<p>安装一些python包，具体需要安装的见<code>“ caffe/python/requirements.txt ”</code> 文件内容如下：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">Cython&gt;</span><span class="bash">=0.19.2</span></span><br><span class="line"><span class="meta">numpy&gt;</span><span class="bash">=1.7.1</span></span><br><span class="line"><span class="meta">scipy&gt;</span><span class="bash">=0.13.2</span></span><br><span class="line"><span class="meta">scikit-image&gt;</span><span class="bash">=0.9.3</span></span><br><span class="line"><span class="meta">matplotlib&gt;</span><span class="bash">=1.3.1</span></span><br><span class="line"><span class="meta">ipython&gt;</span><span class="bash">=3.0.0</span></span><br><span class="line"><span class="meta">h5py&gt;</span><span class="bash">=2.2.0</span></span><br><span class="line"><span class="meta">leveldb&gt;</span><span class="bash">=0.191</span></span><br><span class="line"><span class="meta">networkx&gt;</span><span class="bash">=1.8.1</span></span><br><span class="line"><span class="meta">nose&gt;</span><span class="bash">=1.3.0</span></span><br><span class="line"><span class="meta">pandas&gt;</span><span class="bash">=0.12.0</span></span><br><span class="line"><span class="meta">python-dateutil&gt;</span><span class="bash">=1.4,&lt;2</span></span><br><span class="line"><span class="meta">protobuf&gt;</span><span class="bash">=2.5.0</span></span><br><span class="line"><span class="meta">python-gflags&gt;</span><span class="bash">=2.0</span></span><br><span class="line"><span class="meta">pyyaml&gt;</span><span class="bash">=3.10</span></span><br><span class="line"><span class="meta">Pillow&gt;</span><span class="bash">=2.3.0</span></span><br><span class="line"><span class="meta">six&gt;</span><span class="bash">=1.1.0</span></span><br></pre></td></tr></table></figure>

<p>由于大陆网络的原因，python默认的pypi源速度超级慢，在安装这些扩展包之前我们先修改下pip命令默认的软件源,因为一般pip安装时要管理员权限的，所以先切换到root在root下执行以下操作，在别的用户目录下进行下面操作pip修改源不会生效！</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">cd</span><br><span class="line">mkdir ~/.pip</span><br><span class="line">vim ~/.pip/pip.conf</span><br><span class="line">输入以下内容，其实就是添加默认为清华的源。</span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">trusted-host = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面仅仅是修改了<code>pip install</code>安装时候的默认源，观察发现在使用setup.py的时候依然是使用的<strong>pypi.python.org</strong>，这里需要修改distutils的配置。同上切换到root。</p>
</blockquote>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">vim ~/.pydistutils.cfg</span><br><span class="line">输入：</span><br><span class="line">[easy_install]</span><br><span class="line">index_url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<p>这样以后安装的时候都是通过清华的镜像源，速度比较快。</p>
<p>下面利用命令安装这些库。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">cd ~/caffe/python/</span><br><span class="line">for req in $(cat requirements.txt); do sudo pip install $req -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn; done</span><br></pre></td></tr></table></figure>


<blockquote>
<p>中间可能有些包安装失败，比如我安装过程就出现过：<br>distutils.errors.DistutilsError: Could not find suitable distribution for Requirement.parse(‘google-apputils’)</p>
</blockquote>
<p>这个时候通过手动安装即可：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo pip install google-apputils</span><br></pre></td></tr></table></figure>

<p>还需要把caffe下的python路径添加到到path中，这样好处就是不需要先进入caffe/python目录下才能调用caffe的python接口。<br>进入用户目录 打开 “.bashrc ”文件 在文件最后添加：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> the caffe PYTHONPATH</span></span><br><span class="line">export PYTHONPATH=/path/to/caffe/python:$PYTHONPATH</span><br></pre></td></tr></table></figure>

<p>注意上面的路径换成自己的。</p>
<p><strong>b.</strong> 利用Anaconda python，优点是每个用户可以安装且这个python完全独立于系统的python，而且带的包也很多。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">首先去Anaconda官网下载linux版本的，选择sh执行文件。</span><br><span class="line">比如我下载的是Anaconda2-2.4.1-Linux-x86_64.sh</span><br><span class="line">chmod 755 Anaconda2-2.4.1-Linux-x86_64.sh</span><br><span class="line">./Anaconda2-2.4.1-Linux-x86_64.sh</span><br><span class="line">默认是安装在/home/xxx目录下，并且添加path变量到.bashrc文件中</span><br><span class="line">比如我的是下面这样的</span><br><span class="line">export PATH="/opt/anaconda2/bin:$PATH"</span><br><span class="line">如果希望使用系统自带的python，删除掉上述的记录即可。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>虽然 Anaconda python包括了很多的库，但是也有一些包没有安装，和方法1类似</p>
</blockquote>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">cd ~/caffe/python/</span><br><span class="line">for req in $(cat requirements.txt); do sudo pip install $req -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn; done</span><br></pre></td></tr></table></figure>

<p>至此python接口需要的库已经安装完毕！</p>
<p>如果是用的系统自带的python不用修改Make.config中的python设置，如果用的是Anaconda python，则需要修改：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">PYTHON_INCLUDE := /usr/include/python2.7 \</span></span><br><span class="line">                #/usr/lib64/python2.7/site-packages/numpy/core/include</span><br><span class="line"><span class="meta">#</span><span class="bash"> Anaconda Python distribution is quite popular. Include path:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Verify anaconda location, sometimes it<span class="string">'s in root.</span></span></span><br><span class="line"> ANACONDA_HOME := $(HOME)/anaconda   // 修改成anaconda python安装的目录如/home/anaconda2</span><br><span class="line"> PYTHON_INCLUDE := $(ANACONDA_HOME)/include \</span><br><span class="line">                  $(ANACONDA_HOME)/include/python2.7 \</span><br><span class="line">                  $(ANACONDA_HOME)/lib/python2.7/site-packages/numpy/core/include \</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> We need to be able to find libpythonX.X.so or .dylib.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PYTHON_LIB := /usr/lib</span></span><br><span class="line"> PYTHON_LIB := $(ANACONDA_HOME)/lib</span><br></pre></td></tr></table></figure>

<p><strong>b.</strong> 开始编译编译python接口并添加到path路径</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">cd caffe-folder</span><br><span class="line">make pycaffe</span><br><span class="line"><span class="meta">#</span><span class="bash">测试是否成功</span></span><br><span class="line">cd caffe-folder/python</span><br><span class="line">python</span><br><span class="line">import caffe</span><br><span class="line"><span class="meta">#</span><span class="bash">如果上述命令未报错，说明成功</span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加caffe/python 到python path变量</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> the caffe PYTHONPATH</span></span><br><span class="line">export PYTHONPATH=/path/to/caffe/python:$PYTHONPATH</span><br></pre></td></tr></table></figure>

<blockquote>
<p>！如果是采用的Anaconda python，切记编译python接口在最后执行。</p>
</blockquote>
<blockquote>
<p>！如果是系统自带的python在make pycaffe可能出现python/caffe/_caffe.hpp:8:31: fatal error: numpy/arrayobject.h: No such file or directory<br>这是因为64位的python 库的存放路径问题。</p>
</blockquote>
<p>查找<code>arrayobject.h</code>所在的目录：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo find / -name arrayobject.h</span><br></pre></td></tr></table></figure>

<p>然后修改<code>Makefile.config</code>：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">PYTHON_INCLUDE := /usr/include/python2.7 \</span><br><span class="line">                /usr/lib64/python2.7/site-packages/numpy   //这里修改成找到的路径！</span><br></pre></td></tr></table></figure>

<p>再测试<code>make pycaffe</code>发现可以。</p>
<p>输入 <code>python</code> 进入python命令模式下输入<code>import caffe</code> 没有错误说明python接口无误。</p>
<h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>参照网上和官方的教程安装多次，主要有这几点需要注意，系统最好是Ubutun14.04 这样安装最简单。还有在安装python的时候可以安装第三方的 <a href="https://store.continuum.io/cshop/anaconda/" target="_blank" rel="noopener">Anaconda</a>。</p>
<p>参考：</p>
<p>[1] <a href="http://www.cnblogs.com/platero/p/3993877.html" target="_blank" rel="noopener">http://www.cnblogs.com/platero/p/3993877.html</a></p>
<p>[2]<a href="http://blog.csdn.net/a1311543690/article/details/48878843" target="_blank" rel="noopener"> http://blog.csdn.net/a1311543690/article/details/48878843</a></p>
<p>[3] <a href="http://caffe.berkeleyvision.org/installation.html#compilation" target="_blank" rel="noopener">http://caffe.berkeleyvision.org/installation.html#compilation</a></p>
<p>[4] <a href="http://ju.outofmemory.cn/entry/108631" target="_blank" rel="noopener">http://ju.outofmemory.cn/entry/108631</a></p>
<p>[5] <a href="http://blog.csdn.net/sloanqin/article/details/49152351" target="_blank" rel="noopener">http://blog.csdn.net/sloanqin/article/details/49152351</a></p>
<p>[6] <a href="http://www.bubuko.com/infodetail-785289.html" target="_blank" rel="noopener">http://www.bubuko.com/infodetail-785289.html</a></p>
<p>[7] <a href="http://blog.csdn.net/deeplearninglc007/article/details/40086503" target="_blank" rel="noopener">http://blog.csdn.net/deeplearninglc007/article/details/40086503</a></p>
<p>[8]<a href="http://www.zhihu.com/question/30091667/answer/47951446" target="_blank" rel="noopener"> http://www.zhihu.com/question/30091667/answer/47951446</a></p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>deep learning</tag>
        <tag>caffe</tag>
      </tags>
  </entry>
  <entry>
    <title>修复ubuntu启动项grub</title>
    <url>/2015/11/09/repair-booting-of-grub/</url>
    <content><![CDATA[<h2 id="1-制作ubuntu-启动盘"><a href="#1-制作ubuntu-启动盘" class="headerlink" title="1. 制作ubuntu 启动盘"></a>1. 制作ubuntu 启动盘</h2><p>可以去官网下载iso镜像，然后通过工具<a href="http://www.pendrivelinux.com/" target="_blank" rel="noopener">Universal-USB-Installer</a>制作启动盘，这个工具支持多种版本的Linux系统。</p><h2 id="2-进入U盘中的系统"><a href="#2-进入U盘中的系统" class="headerlink" title="2. 进入U盘中的系统"></a>2. 进入U盘中的系统</h2><p>开机选择U盘启动，进入ubuntu的选择界面，这里我们选择，使用ubuntu并不安装，成功进入后开始修复</p><h2 id="3-安装更新grub"><a href="#3-安装更新grub" class="headerlink" title="3. 安装更新grub"></a>3. 安装更新grub</h2><a id="more"></a>

<p>打开终端 CTRL+ALT+T  </p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo -i            # 切换到root用户  </span><br><span class="line">fdisk -l           # 查看当前磁盘的分布情况，找到boot分区</span><br></pre></td></tr></table></figure>

<p>比如我电脑的分区如下：</p>
<p><img alt data-src="http://i.imgur.com/RFgIBix.png"></p>
<p>根据自己电脑情况找到boot分区，红线圈出来的部分就是我电脑的boot分区，大小为300M。记住他的分区号sda2<br>创建挂载目录：  </p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">mkdir /mnt/root</span><br></pre></td></tr></table></figure>

<p>将boot分区挂载到刚创建的目录  </p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">mount /dev/sda2 /mnt/root</span><br></pre></td></tr></table></figure>

<p>安装grub启动管理器  </p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">grub-install --boot-directory=/mnt/root  /dev/sda</span><br></pre></td></tr></table></figure>


<p>回车执行会提示 no error reported, 安装成功。重启电脑后grub重新回来。</p>
]]></content>
      <categories>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu下安装深度学习python工具包keras</title>
    <url>/2015/10/03/keras-environment-build/</url>
    <content><![CDATA[<p>最近一直在学习深度学习，开始用过matlab的工具箱，感觉很多功能不够，发现基于python的工具箱很多，找了一下发现<a href="http://deeplearning.net/software/theano/install.html#install" target="_blank" rel="noopener">Theano</a>是使用比较多的一个，但是比较老，模块化也不够。经过别人的推荐开始使用基于<a href="http://deeplearning.net/software/theano/install.html#install" target="_blank" rel="noopener">Theano</a>的一个深度学习的工具包<a href="http://keras.io/" target="_blank" rel="noopener">Keras</a>。</p><h2 id="1-Keras简介"><a href="#1-Keras简介" class="headerlink" title="1. Keras简介"></a>1. Keras简介</h2><p>Keras是基于Theano的一个深度学习框架，它的设计参考了Torch，用Python语言编写，是一个高度模块化的神经网络库，支持GPU和CPU。使用文档在这： <a href="http://keras.io" target="_blank" rel="noopener">http://keras.io/</a>,这个框架貌似是刚刚火起来的，使用上的问题可以到github提issue:<a href="https://github.com/fchollet/keras" target="_blank" rel="noopener">https://github.com/fchollet/keras</a>　</p><a id="more"></a>

<h2 id="2-Ubuntu下Keras的安装"><a href="#2-Ubuntu下Keras的安装" class="headerlink" title="2. Ubuntu下Keras的安装"></a>2. Ubuntu下Keras的安装</h2><p>参照keras官网给出的安装方法<a href="http://keras.io/" target="_blank" rel="noopener">http://keras.io/</a><br><img alt data-src="http://i.imgur.com/nB2RxjO.png"><br>从这里我们可以看到要安装keras我们还必须先安装其他几个python库。</p>
<h3 id="2-1-安装Theano"><a href="#2-1-安装Theano" class="headerlink" title="2.1 安装Theano"></a>2.1 安装<a href="http://deeplearning.net/software/theano/install.html#install" target="_blank" rel="noopener">Theano</a></h3><p>先安装theano是因为numpy和scipy可以在这个过程一起安装。<br>参照theano在ubuntu下的安装指南<a href="http://deeplearning.net/software/theano/install_ubuntu.html#install-ubuntu" target="_blank" rel="noopener">1</a><br>打开终端输入命令：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-numpy python-scipy python-dev python-pip python-nose g++ libopenblas-dev git</span><br><span class="line">sudo pip install Theano</span><br></pre></td></tr></table></figure>

<p>第一条命令主要是安装Theano需要的扩展库，第二条是安装Theano。</p>
<h3 id="2-2-安装pyyaml"><a href="#2-2-安装pyyaml" class="headerlink" title="2.2 安装pyyaml"></a>2.2 安装pyyaml</h3><p>打开终端输入命令：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo pip install pyyaml</span><br></pre></td></tr></table></figure>

<p>可以看到还有两个可选的库，建议安装HDF5和h5py，至于cuDNN根据你自己的情况而定。<br>打开终端输入命令：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libhdf5-serial-dev</span><br><span class="line">sudo pip install h5py</span><br></pre></td></tr></table></figure>

<p>到这里所有的库已经安装完毕。</p>
<h3 id="2-3-安装Keras"><a href="#2-3-安装Keras" class="headerlink" title="2.3 安装Keras"></a>2.3 安装Keras</h3><p>打开终端输入命令</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo pip install keras</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>测试安装是否成功</strong></li>
</ul>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">NumPy (~30s): python -c "import numpy; numpy.test()"</span><br><span class="line">SciPy (~1m): python -c "import scipy; scipy.test()"</span><br><span class="line">Theano (~30m): python -c "import theano; theano.test()"</span><br></pre></td></tr></table></figure>

<p>程序运行过程中会不断输出字符代表成功。</p>
<p>参考</p>
<p>[1] <a href="http://blog.csdn.net/u012162613/article/details/45397033" target="_blank" rel="noopener">http://blog.csdn.net/u012162613/article/details/45397033</a><br>[2] <a href="http://deeplearning.net/software/theano/install_ubuntu.html#install-ubuntu" target="_blank" rel="noopener">http://deeplearning.net/software/theano/install_ubuntu.html#install-ubuntu</a></p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下安装nvidia显卡驱动</title>
    <url>/2015/10/02/install-graphic-driver/</url>
    <content><![CDATA[<p>最近一直在给实验室的工作站搭建环境，系统换了linux后发现画面相当感人，非常模糊，觉得应该是显卡驱动的原因，然后网上各种找方法。</p><h2 id="方法１-从受限制的源安装驱动"><a href="#方法１-从受限制的源安装驱动" class="headerlink" title="方法１.从受限制的源安装驱动"></a>方法１.从受限制的源安装驱动</h2><p>打开终端输入如下命令安装驱动：</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nvidia-current nvidia-settings</span><br></pre></td></tr></table></figure><blockquote>
<p>通过这种方法安装的驱动开机后电脑很有可能会显示不正常，虽然画面不模糊了，但是画面不协调。这个时候我们只好卸载刚刚装好的驱动。可以通过快捷键打开终端 <strong>ctrl+alt+t</strong>，</p>
</blockquote><a id="more"></a>





<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo apt-get --purge remove nvidia-*</span><br></pre></td></tr></table></figure>

<p>卸载完之后只能选择安装官方自己开发的显卡驱动。</p>
<h2 id="方法2-从官网下载压缩包驱动手动安装"><a href="#方法2-从官网下载压缩包驱动手动安装" class="headerlink" title="方法2.从官网下载压缩包驱动手动安装"></a>方法2.从官网下载压缩包驱动手动安装</h2><ul>
<li><p>到<a href="http://www.nvidia.cn/Download/index.aspx?lang=cn" target="_blank" rel="noopener">Nvidia</a>的官网选择下载自己显卡对应型号的驱动</p>
<p><img alt data-src="http://i.imgur.com/HZyGCZw.png"></p>
</li>
<li><p>下载后发现是一个<strong>.run</strong>格式的压缩包</p>
<p><img alt data-src="http://i.imgur.com/iCVFOIH.png"></p>
</li>
</ul>
<p>将它拷贝到 /usr/local 目录下  </p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo cp NVIDIA*.run /usr/local/</span><br></pre></td></tr></table></figure>


<p>执行命令<code>sudo sh NVIDIA*.run</code> 运行过后出现ERROR<br>ou appear to be running an X server; please exit X before installing.  For further details, please see the section INSTALLING THE NVIDIA DRIVER in the README  available on the Linux driver download page at <a href="http://www.nvidia.com" target="_blank" rel="noopener">www.nvidia.com</a>.</p>
<p> <img alt data-src="http://i.imgur.com/lbEFwZn.png"></p>
<ul>
<li>根据提示我们应该先关闭ubuntu的图形用户界面之后在命令行模式下安装驱动。<br>如何切换到命令提示符模式，详情参考我的博客 <a href="http://blog.csdn.net/a1311543690/article/details/48861237" target="_blank" rel="noopener">http://blog.csdn.net/a1311543690/article/details/48861237</a></li>
<li>成功切换到命令行后在这个模式下重复上述拷贝、执行的步骤。安装过程中会有警告，可以直接忽略，安装完后记得按照我博客的方法修改grub文件重新切换到图形用户界面。</li>
</ul>
]]></content>
      <categories>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>显卡</tag>
        <tag>驱动</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu从图形用户界面切换到命令提示符界面</title>
    <url>/2015/10/02/ubuntu-switch-graphic-text/</url>
    <content><![CDATA[<h2 id="1-临时进入命令模式"><a href="#1-临时进入命令模式" class="headerlink" title="1. 临时进入命令模式"></a>1. 临时进入命令模式</h2><p>如果你想要禁止桌面GUI并临时进入一次文本模式，你可以使用GRUB菜单。首先，打开你的电脑。当你看到初始的GRUB菜单时，按下键盘上的的字母e。</p><p> <img alt data-src="http://i.imgur.com/Uaco7ma.png"></p><p>接着会进入下一屏，这里你可以修改内核启动选项。向下滚动到以“linux”开始的行，这里就是内核参数的列表。利用方向键找到参数列表中的“quiet”和“splash”，用delete键删除“quiet”和“splash”，并在参数列表中添加“text”。</p><a id="more"></a>


<p> <img alt data-src="http://i.imgur.com/GA8sbOD.png"></p>
<p>升级的内核选项列表看上去像这样。按下Ctrl+x继续启动。这会以详细模式启动控制台一次（LCTT译注：由于没有保存修改，所以下次重启还会进入 GUI）。</p>
<h2 id="2-永久进入命令模式"><a href="#2-永久进入命令模式" class="headerlink" title="2. 永久进入命令模式"></a>2. 永久进入命令模式</h2><ul>
<li><p>在文本编辑器中打开默认的GRUB配置文件。<br><code>sudo gedit /etc/default/grub</code></p>
</li>
<li><p>查找以GRUB_CMDLINE_LINUX_DEFAULT开头的行，并用“#”注释这行。这会禁止初始屏幕，而启动详细模式。</p>
</li>
<li><p>更改<code>GRUBCMDLINELINUX=&quot;&quot;</code> 成：<code>GRUB_CMDLINE_LINUX=&quot;text&quot;</code></p>
</li>
<li><p>接下来取消<code>“#GRUB_TERMINAL=console”</code>的注释。</p>
</li>
<li><p>更新后的GRUB配置看上去像下面这样。</p>
<p><img alt data-src="http://i.imgur.com/USYhGWW.jpg"></p>
</li>
</ul>
<p>最后，使用<code>update-grub</code>命令来基于这些更改重新生成/boot下的GRUB2配置文件。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure>


<p>这时，你的桌面应该可以从GUI启动切换到控制台启动了。可以通过重启验证。</p>
<h2 id="3-从永久命令行切换回图形用户界面"><a href="#3-从永久命令行切换回图形用户界面" class="headerlink" title="3. 从永久命令行切换回图形用户界面"></a>3. 从永久命令行切换回图形用户界面</h2><ul>
<li>从命令切换到图形界面是一个逆向过程，只需要将原来修改的grub还原即可。<br>之前是在图像界面所以可以用 <code>sudo gedit /etc/default/grub</code>打开grub进行修改。<br>在命令行模式下输入 <code>sudo vi /etc/default/grub</code>编辑grub文件。利用方向键找到需要修改的部分，利用delete删除。</li>
<li>修改完毕后按两下大写的字母Z即可保存并退出vi编辑器。</li>
<li>更新grub文件，继续在当前模式下输入以下命令：</li>
</ul>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure>

<ul>
<li>重启电脑 <code>sudo reboot</code> 这时候可以发现图形用户界面已经回来了。</li>
</ul>
<p>注：所有图片来自红联Linux系统教程</p>
]]></content>
      <categories>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
</search>
